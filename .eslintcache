[{"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\index.js":"1","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\reportWebVitals.js":"2","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\App.js":"3","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Context\\ToasterContext.js":"4","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\User\\SignIn.js":"5","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\MainRoute\\HomePage.js":"6","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\User\\LoginCheck.js":"7","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Toaster.js":"8","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\stores\\store.js":"9","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\actions\\net.js":"10","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\config\\config.js":"11","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\aws-exports.js":"12","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Header\\Header.js":"13","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Footer\\Footer.js":"14","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Menu\\Menu.js":"15","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\index.js":"16","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\ListItemLink\\ListItemLink.js":"17","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\PageTemplate\\PageTemplate.js":"18","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\About\\About.js":"19","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Book\\BookList.js":"20","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\BookItem.js":"21","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\index.js":"22","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\AddBook.js":"23","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Loading.js":"24","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Button.js":"25","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Message.js":"26","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Field.js":"27","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Modal.js":"28","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\BookForm.js":"29","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Radio\\CustomRadioButton.js":"30","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\ImgUpload\\ImgUpload.js":"31","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\SearchInputBar\\SearchInputBar.js":"32","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Editor\\TinymceEditor.js":"33","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Checkbox\\CustomCheckbox.js":"34","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Table\\CustomTable.js":"35","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\TextField\\CustomTextField.js":"36","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\SelectBox\\CustomSelectBox.js":"37","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Pagination\\CustomPagination.js":"38","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\index.js":"39","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\NoticeList.js":"40","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\NoticeRegist.js":"41","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Community.js":"42","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Test\\Test.js":"43","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Test\\NomalComponent.js":"44","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\organisms\\Table.js":"45","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Table\\TableGrid.js":"46"},{"size":546,"mtime":1621283651590,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1618451423006,"results":"49","hashOfConfig":"48"},{"size":1175,"mtime":1621477233470,"results":"50","hashOfConfig":"48"},{"size":684,"mtime":1620981115729,"results":"51","hashOfConfig":"48"},{"size":2713,"mtime":1621300093381,"results":"52","hashOfConfig":"48"},{"size":2180,"mtime":1621492908270,"results":"53","hashOfConfig":"48"},{"size":2782,"mtime":1621299154048,"results":"54","hashOfConfig":"48"},{"size":798,"mtime":1609454480000,"results":"55","hashOfConfig":"48"},{"size":590,"mtime":1620783656441,"results":"56","hashOfConfig":"48"},{"size":158170,"mtime":1621495803919,"results":"57","hashOfConfig":"48"},{"size":232,"mtime":1620720207306,"results":"58","hashOfConfig":"48"},{"size":1039,"mtime":1620976791150,"results":"59","hashOfConfig":"48"},{"size":2891,"mtime":1621323163195,"results":"60","hashOfConfig":"48"},{"size":129,"mtime":1620884503842,"results":"61","hashOfConfig":"48"},{"size":4693,"mtime":1621492889566,"results":"62","hashOfConfig":"48"},{"size":57,"mtime":1620885520266,"results":"63","hashOfConfig":"48"},{"size":2313,"mtime":1620950000364,"results":"64","hashOfConfig":"48"},{"size":988,"mtime":1621283307872,"results":"65","hashOfConfig":"48"},{"size":160,"mtime":1620981467458,"results":"66","hashOfConfig":"48"},{"size":943,"mtime":1621291429227,"results":"67","hashOfConfig":"48"},{"size":426,"mtime":1620641192970,"results":"68","hashOfConfig":"48"},{"size":805,"mtime":1621289263020,"results":"69","hashOfConfig":"48"},{"size":2028,"mtime":1621284039483,"results":"70","hashOfConfig":"48"},{"size":69,"mtime":1609454480000,"results":"71","hashOfConfig":"48"},{"size":629,"mtime":1621284061936,"results":"72","hashOfConfig":"48"},{"size":682,"mtime":1609454480000,"results":"73","hashOfConfig":"48"},{"size":414,"mtime":1620643338743,"results":"74","hashOfConfig":"48"},{"size":1599,"mtime":1609454480000,"results":"75","hashOfConfig":"48"},{"size":1176,"mtime":1621284054170,"results":"76","hashOfConfig":"48"},{"size":719,"mtime":1618388217819,"results":"77","hashOfConfig":"48"},{"size":2242,"mtime":1618388217819,"results":"78","hashOfConfig":"48"},{"size":11100,"mtime":1621477449929,"results":"79","hashOfConfig":"48"},{"size":1237,"mtime":1618388217803,"results":"80","hashOfConfig":"48"},{"size":1489,"mtime":1618388217803,"results":"81","hashOfConfig":"48"},{"size":23221,"mtime":1621289259495,"results":"82","hashOfConfig":"48"},{"size":2416,"mtime":1618388217834,"results":"83","hashOfConfig":"48"},{"size":1190,"mtime":1618388217834,"results":"84","hashOfConfig":"48"},{"size":955,"mtime":1618388217819,"results":"85","hashOfConfig":"48"},{"size":101,"mtime":1618388217881,"results":"86","hashOfConfig":"48"},{"size":15727,"mtime":1621497840491,"results":"87","hashOfConfig":"48"},{"size":21521,"mtime":1621285241787,"results":"88","hashOfConfig":"48"},{"size":640,"mtime":1621326686959,"results":"89","hashOfConfig":"48"},{"size":2858,"mtime":1621564821121,"results":"90","hashOfConfig":"48"},{"size":243,"mtime":1621298880443,"results":"91","hashOfConfig":"48"},{"size":1948,"mtime":1621501960970,"results":"92","hashOfConfig":"48"},{"size":661,"mtime":1621490636193,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1e0p65y",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"96"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\index.js",[],["205","206"],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\reportWebVitals.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\App.js",["207","208"],"import {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {CookiesProvider} from \"react-cookie\";\nimport {ToasterProvider} from \"./UI/atoms/Context/ToasterContext\";\nimport {HomePage} from \"./components/templates/MainRoute/HomePage\";\nimport SignIn from \"./components/pages/User/SignIn\";\nimport LoginCheck from \"./components/pages/User/LoginCheck\";\nimport \"./App.scss\";\nimport {Test} from \"./components/pages/Test/Test\";\nimport BookList from \"./components/pages/Book/BookList\";\nimport React from \"react\";\n\nfunction App() {\n    return (\n        <CookiesProvider>\n            <BrowserRouter>\n                <ToasterProvider>\n                    <Switch>\n                        <Route path={\"/login\"} exact component={SignIn}/>\n                        <Route path=\"/login/check\" exact component={LoginCheck}/>\n                        <Route path={\"/not-found\"} exact component={BookList}/>\n                        <Route path={\"/\"}>\n                            <HomePage/>\n                        </Route>\n                    </Switch>\n                </ToasterProvider>\n            </BrowserRouter>\n        </CookiesProvider>\n    );\n}\n\nexport default App;\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Context\\ToasterContext.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\User\\SignIn.js",["209","210","211","212","213","214"],"import React, {useEffect, useReducer, useState} from \"react\";\r\nimport {Auth, Hub} from 'aws-amplify'\r\nimport store from '../../../stores/store';\r\nimport Net from '../../../actions/net';\r\nimport LoginCheck from \"./LoginCheck\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport DeviceStorage from \"react-device-storage\";\r\n\r\nconst initialUserState = {user: null, loading: true}\r\n\r\nfunction SignIn() {\r\n    const [userState, dispatch] = useReducer(reducer, initialUserState);\r\n    const [formState, updateFormState] = useState('base');\r\n\r\n    const isAuthenticated = store.isAuthorized || sessionStorage.getItem('isAuthorized');\r\n\r\n    useEffect(async () => {\r\n        await Hub.listen('auth', (data) => {\r\n            console.log(data);\r\n            const {payload} = data\r\n            if (payload.event === 'signIn') {\r\n\r\n\r\n                store.isAuthorized = true;\r\n                const accessToken = data.payload.data.signInUserSession.accessToken.jwtToken;\r\n                const refreshToken = data.payload.data.signInUserSession.refreshToken.token;\r\n\r\n                store.auth = {\r\n                    token: accessToken,\r\n                    refreshToken: refreshToken\r\n                }\r\n\r\n                const S = new DeviceStorage().localStorage();\r\n                S.save('token', accessToken);\r\n                S.save('refreshToken', refreshToken);\r\n            }\r\n            // this listener is needed for form sign ups since the OAuth will redirect & reload\r\n            if (payload.event === 'signOut') {\r\n                setTimeout(() => dispatch({type: 'setUser', user: null}), 350)\r\n            }\r\n        })\r\n            await Auth.federatedSignIn();\r\n    }, [userState])\r\n\r\n    return (\r\n    <>\r\n        {\r\n            userState.user &&  (\r\n                <Redirect to={\"/\"}/>\r\n            )\r\n        }\r\n\r\n    </>\r\n    );\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'setUser':\r\n            return {...state, user: action.user, loading: false}\r\n        case 'loaded':\r\n            return {...state, loading: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nasync function checkUser(dispatch) {\r\n    try {\r\n        const user = await Auth.currentAuthenticatedUser()\r\n        await Net.getMe((res) => {\r\n            console.log(\"/me\", res);\r\n            store.user = res.data;\r\n            sessionStorage.setItem('user', JSON.stringify(res.data));\r\n            sessionStorage.setItem('isAuthorized', true);\r\n            console.log('user: ', user)\r\n            dispatch({type: 'setUser', user})\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log('err: ', err)\r\n        dispatch({type: 'loaded'})\r\n    }\r\n}\r\n\r\nexport default SignIn;","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\MainRoute\\HomePage.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\User\\LoginCheck.js",["215","216"],"import React, {useEffect, useReducer, useState} from 'react';\r\nimport store from '../../../stores/store';\r\nimport Net from '../../../actions/net';\r\nimport {Auth, Hub} from 'aws-amplify'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport DeviceStorage from \"react-device-storage\";\r\n\r\nconst initialUserState = {user: null, loading: true}\r\n\r\nfunction LoginCheck() {\r\n    const [userState, dispatch] = useReducer(reducer, initialUserState);\r\n    const [formState, updateFormState] = useState('base');\r\n\r\n    useEffect(() => {\r\n\r\n        // set listener for auth events\r\n        Hub.listen('auth', (data) => {\r\n            console.log(data);\r\n            const {payload} = data\r\n            if (payload.event === 'signIn') {\r\n\r\n\r\n                store.isAuthorized = true;\r\n                const accessToken = data.payload.data.signInUserSession.accessToken.jwtToken;\r\n                const refreshToken = data.payload.data.signInUserSession.refreshToken.token;\r\n\r\n                store.auth = {\r\n                    token: accessToken,\r\n                    refreshToken: refreshToken\r\n                }\r\n\r\n                const S = new DeviceStorage().localStorage();\r\n                S.save('token', accessToken);\r\n                S.save('refreshToken', refreshToken);\r\n            }\r\n            // this listener is needed for form sign ups since the OAuth will redirect & reload\r\n            if (payload.event === 'signOut') {\r\n                setTimeout(() => dispatch({type: 'setUser', user: null}), 350)\r\n            }\r\n        })\r\n        // we check for the current user unless there is a redirect to ?signedIn=true\r\n        if (!window.location.search.includes('?signedin=true')) {\r\n            checkUser(dispatch)\r\n        }\r\n    }, [userState])\r\n\r\n    return (\r\n        <>\r\n        {\r\n            userState.user &&  (\r\n                <Redirect to={\"/\"}/>\r\n            )\r\n        }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'setUser':\r\n            return {...state, user: action.user, loading: false}\r\n        case 'loaded':\r\n            return {...state, loading: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nasync function checkUser(dispatch) {\r\n    try {\r\n        const user = await Auth.currentAuthenticatedUser()\r\n        await Net.getMe((res) => {\r\n            console.log(\"/me\", res);\r\n            store.user = res.data;\r\n            sessionStorage.setItem('user', JSON.stringify(res.data));\r\n            sessionStorage.setItem('isAuthorized', true);\r\n            console.log('user: ', user)\r\n            dispatch({type: 'setUser', user})\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log('err: ', err)\r\n        dispatch({type: 'loaded'})\r\n    }\r\n}\r\n\r\nexport default LoginCheck;","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Toaster.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\stores\\store.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\actions\\net.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import store from '../stores/store';\r\nimport axios from 'axios';\r\nimport DeviceStorage from 'react-device-storage';\r\nimport {Auth} from \"aws-amplify\";\r\n\r\naxios.defaults.baseURL = store.api;\r\naxios.defaults.headers.common['Content-Type'] = 'application/json; charset=UTF-8';\r\n\r\nconst refreshToken = async (callback) => {\r\n    console.log('refreshToken Method');\r\n    const S = new DeviceStorage().localStorage();\r\n    const refreshToekn = S.read('refreshToken') || store.auth.refreshToken;\r\n    await axios\r\n        .post(`/token/refresh`, {refreshToken: refreshToekn})\r\n        .then((response) => {\r\n            if (response.status === 200) {\r\n\r\n                S.save('token', response.data.accessToken);\r\n                store.auth = {\r\n                    ...store.auth,\r\n                    token: response.data.accessToken,\r\n                };\r\n\r\n                callback(response);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            S.delete('token');\r\n            S.delete('location');\r\n            window.location.reload('/login');\r\n        });\r\n}\r\n\r\naxios.interceptors.request.use(\r\n    function (config) {\r\n\r\n        const S = new DeviceStorage().localStorage();\r\n        if (!config.url.includes('/login') && !config.url.includes('/api/kolonbenit') && (S.read('token') !== undefined || store.auth.token !== undefined && store.auth.token !== '')) {\r\n            if (\r\n                config.url.startsWith('/placement/customer/images') ||\r\n                config.url.startsWith('/community/notice/image') ||\r\n                config.url.startsWith('/community/feed/image') ||\r\n                config.url.startsWith('/community/faq/image') ||\r\n                config.url.startsWith('/community/qna/image') ||\r\n                config.url.startsWith('/community/reservation/image') ||\r\n                config.url.startsWith('/community/vote/image') ||\r\n                config.url.startsWith('/files')\r\n\r\n            ) {\r\n                // img upload시 content-type을 form-data로 보내야 함.\r\n                axios.defaults.headers.common['Content-Type'] = 'multipart/form-data';\r\n            }\r\n            config.headers.Authorization = 'Bearer ' + S.read('token') || store.auth.token;\r\n        }\r\n        return config;\r\n    },\r\n\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n    function (response) {\r\n        return response;\r\n    },\r\n\r\n    function (error) {\r\n        if (error.response !== undefined) {\r\n            if (error.response.status === 401) {\r\n                if (window.location.href.indexOf('/login') < 0) {\r\n                    /*refreshToken((response) => {\r\n                        if (response.status === 200) {\r\n                            console.log(response);\r\n                            window.location.reload();\r\n                        }\r\n                    });*/\r\n                } else if (error.response.data.message === 'Unauthorized') {\r\n                    return error.response;\r\n                }\r\n            } else if (error.response.status === 409) {\r\n                store.alert('중복 된 데이터가 있습니다.\\n관리자에게 문의하세요.');\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst getUserInfo = async (callback) => {\r\n    await axios\r\n        .get(`/me`)\r\n        .then((response) => {\r\n            callback(response);\r\n        })\r\n        .catch((error) => {\r\n            console.log('error : ' + JSON.stringify(error));\r\n        });\r\n};\r\n\r\nconst dataURLtoBlob = (dataurl) => {\r\n    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n    while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new Blob([u8arr], {type: mime});\r\n}\r\n\r\nfunction imageEncode(arrayBuffer) {\r\n    let u8 = new Uint8Array(arrayBuffer)\r\n    let b64encoded = btoa([].reduce.call(new Uint8Array(arrayBuffer), function (p, c) {\r\n        return p + String.fromCharCode(c)\r\n    }, ''))\r\n    let mimetype = \"image/jpeg\"\r\n    return \"data:\" + mimetype + \";base64,\" + b64encoded\r\n}\r\n\r\nexport default {\r\n\r\n    // 로그인\r\n    login(id, password, callback) {\r\n\r\n        const body = {\r\n            username: id,\r\n            password: password\r\n        }\r\n        axios\r\n            .post(`/login`, body)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    const DATA = response.data;\r\n                    store.auth = {\r\n                        token: DATA.accessToken,\r\n                        refreshToken: DATA.refreshToken,\r\n                    };\r\n\r\n                    const S = new DeviceStorage().localStorage();\r\n                    S.save('token', DATA.accessToken);\r\n                    S.save('refreshToken', DATA.refreshToken);\r\n\r\n                    getUserInfo((res) => {\r\n                        store.user = res.data;\r\n                        sessionStorage.setItem('user', JSON.stringify(res.data));\r\n                        if (res.status === 200) {\r\n                            store.isAuthorized = true;\r\n                            sessionStorage.setItem('isAuthorized', true);\r\n                            callback(response);\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    callback(response);\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 로그아웃\r\n    logout(callback) {\r\n        axios\r\n            .get(`/logout`)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    Object.keys(store.auth).map(key => {\r\n                        store.user[key] = null;\r\n                    });\r\n                    Object.keys(store.user).map(key => {\r\n                        store.user[key] = null;\r\n                    });\r\n                    store.isAuthorized = false;\r\n                    const S = new DeviceStorage().localStorage();\r\n                    S.delete('token');\r\n                    S.delete('refreshToken');\r\n                    sessionStorage.removeItem('isAuthorized');\r\n                    sessionStorage.removeItem('user');\r\n                }\r\n\r\n                Auth.signOut().then(data => {\r\n                    callback(response);\r\n                });\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //사용자 전체 조회\r\n    getUserList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchText ? \"&username=\" + pageState.searchText : '';\r\n        axios\r\n            .get(`/users?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //사용자 상세 조회\r\n    getUserOne(param, callback) {\r\n        axios\r\n            .get(`/users/${param}`)\r\n            .then((response) => {\r\n                if (response.data.picture) {\r\n                    this.getUserImg(response.data.picture, (response2) => {\r\n                        const imageDataUrl = response2.data;\r\n                        const resData = {\r\n                            data: {\r\n                                ...response.data,\r\n                                imageDataUrl: imageDataUrl,\r\n                            },\r\n                            status: 200,\r\n                        }\r\n\r\n                        callback(resData);\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    getMe(callback) {\r\n        axios\r\n            .get(`/me`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //사용자 중복체크\r\n    checkUserOne(checkType, param, callback) {\r\n        let searchCondition = \"\";\r\n        switch (checkType) {\r\n            case \"username\":\r\n                searchCondition = `check?username=${param.username}`;\r\n                break;\r\n            case \"phoneNumber\":\r\n                searchCondition = `phone-number/check?phoneNumber=${param.phoneNumber}`;\r\n                break;\r\n            case \"nickname\":\r\n                searchCondition = `nickname/check?nickname=${param.nickname}`;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        axios\r\n            .get(`/users/${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 409) {\r\n                    callback(error.response);\r\n                } else {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                }\r\n            });\r\n    },\r\n\r\n    // 사용자 추가\r\n    addUser(state, callback) {\r\n        const body = {\r\n            \"username\": state.username,\r\n            \"name\": state.name,\r\n            \"email\": state.email,\r\n            \"nickname\": state.nickname,\r\n            \"contact\": state.contact,\r\n            \"phoneNumber\": state.phoneNumber,\r\n            \"password\": state.password,\r\n            \"status\": state.status,\r\n            \"customer\": {\r\n                \"code\": state.customer.code,\r\n                \"name\": state.customer.name,\r\n            },\r\n            \"site\": {\r\n                \"code\": state.site.code,\r\n                \"name\": state.site.name,\r\n            },\r\n            \"place\": {\r\n                \"code\": state.place.code,\r\n                \"name\": state.place.name,\r\n            },\r\n            \"menuGroup\": state.menuGroup,\r\n            \"authList\": state.authList,\r\n            \"roleList\": state.roleList,\r\n            \"picture\": '',\r\n            \"imageDataUrl\": state.imageDataUrl,\r\n            \"enabled\": state.enabled,\r\n        }\r\n\r\n        if (state.imageDataUrl !== '') {\r\n            this.UserImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    body.picture = imageId;\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .post(`/users`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        });\r\n                } else if (response === 'error') {\r\n                    body.picture = '';\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .post(`/users`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        });\r\n                }\r\n            });\r\n        } else {\r\n            axios\r\n                .post(`/users`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                });\r\n        }\r\n    },\r\n\r\n    // 사용자 추가\r\n    updateUser(state, callback) {\r\n        const body = {\r\n            \"username\": state.username,\r\n            \"name\": state.name,\r\n            \"email\": state.email,\r\n            \"nickname\": state.nickname,\r\n            \"contact\": state.contact,\r\n            \"phoneNumber\": state.phoneNumber,\r\n            \"status\": state.status,\r\n            \"customer\": {\r\n                \"code\": state.customer.code,\r\n                \"name\": state.customer.name,\r\n            },\r\n            \"site\": {\r\n                \"code\": state.site.code,\r\n                \"name\": state.site.name,\r\n            },\r\n            \"place\": {\r\n                \"code\": state.place.code,\r\n                \"name\": state.place.name,\r\n            },\r\n            \"menuGroup\": state.menuGroup,\r\n            \"authList\": state.authList,\r\n            \"roleList\": state.roleList,\r\n            \"picture\": state.picture,\r\n            \"imageDataUrl\": state.imageDataUrl,\r\n            \"enabled\": state.enabled,\r\n        }\r\n        if (state.password) {\r\n            body.password = state.password;\r\n        }\r\n\r\n        if (state.imageDataUrl !== '') {\r\n            this.UserImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    body.picture = imageId;\r\n                    axios\r\n                        .put(`/users/${state.username}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        });\r\n                } else if (response === 'error') {\r\n                    body.picture = '';\r\n                    axios\r\n                        .put(`/users/${state.username}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        });\r\n                }\r\n            });\r\n        } else {\r\n            axios\r\n                .put(`/users/${state.username}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                });\r\n        }\r\n    },\r\n\r\n    // 사용자 - 이미지 가져오기\r\n    getUserImg(image, callback) {\r\n        axios\r\n            .get(`/files/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                response.data = imageEncode(response.data);\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ', error);\r\n                callback({data: null});\r\n            })\r\n    },\r\n\r\n    // 사용자 - 이미지업로드\r\n    UserImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('file', blob);\r\n        form.append('target', 'dev-account-smartiok');\r\n        form.append('path', 'picture');\r\n        form.append('description', '프로필')\r\n        axios\r\n            .post(`/files/upload`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    getUserAutomationList(username, callback) {\r\n        axios\r\n            .get(`/automation/user/${username}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 404) {\r\n                    callback(error.response);\r\n                } else {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                }\r\n            });\r\n    },\r\n\r\n    getUserAutomationOne(automationId, callback) {\r\n        axios\r\n            .get(`/automation/${automationId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    addUserDevice(state, callback) {\r\n        const userDevice = {\r\n            \"deviceId\": state.deviceId,\r\n            \"deviceNickname\": state.deviceNickname,\r\n            \"spaceId\": state.spaceId,\r\n            \"placeId\": state.placeId,\r\n            \"username\": state.username\r\n        };\r\n\r\n        axios\r\n            .post(`/devices/${userDevice.deviceId}/users`, userDevice)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n\r\n    getUserDeviceList(params, callback) {\r\n        const queryString = params.username ? `?username=${params.username}` : '';\r\n        axios\r\n            .get(`/devices/users` + queryString)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 사용자 - 유저 삭제\r\n    removeUserList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/users/${code.username}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 장비타입 전체 조회\r\n    getToolsTypeList(pageState, callback) {\r\n        axios\r\n            .get(`/devices/types?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 장비타입 상세 조회\r\n    getToolsTypeOne(code, callback) {\r\n        axios\r\n            .get(`/devices/types/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 404) {\r\n                    callback(error.response);\r\n                } else {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                }\r\n            });\r\n    },\r\n\r\n    // 장비 - 장비타입 등록시 장비타입코드 중복 체크\r\n    chkDuplicateToolsType(code, callback) {\r\n        axios\r\n            // .get(`/devices/types?code=${code}`)\r\n            .get(`/devices/types/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장비 - 장비타입 삭제\r\n    removeToolsTypeList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/devices/types/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 장비타입 추가\r\n    addToolsType(state, callback) {\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .post(`/devices/types`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 장비타입 수정\r\n    updateToolsType(state, callback) {\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .put(`/devices/types/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 모델 전체 조회\r\n    getToolsModelList(pageState, callback) {\r\n        let manufacturerCode = '';\r\n        let typeCode = '';\r\n        if (pageState.manufacturer.code !== '' && pageState.manufacturer.code !== undefined) {\r\n            manufacturerCode = `/${pageState.manufacturer.code}`;\r\n        }\r\n        if (pageState.type.code !== '' && pageState.type.code !== undefined) {\r\n            typeCode = `/${pageState.type.code}`;\r\n        }\r\n\r\n        axios\r\n            .get(`/manufacturers${manufacturerCode}/models${typeCode}?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장비 - 모델 상세 조회\r\n    getToolsModelOne(params, callback) {\r\n        axios\r\n            .get(`/manufacturers/${params.manufacturerCode}/models/${params.code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장비 - 모델 등록시 모델코드 중복 체크\r\n    chkDuplicateToolsModel(params, callback) {\r\n        axios\r\n            // .get(`/manufacturers/models?code=${params.code}`)\r\n            .get(`manufacturers/${params.manufacturer.code}/models/${params.code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장비 - 모델 삭제\r\n    removeToolsModelList(items, callback) {\r\n        const list = items.map(codeList => {\r\n            return axios.delete(`/manufacturers/${codeList.manufacturerCode}/models/${codeList.code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 모델 추가\r\n    addToolsModel(state, callback) {\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"type\": {\r\n                \"code\": state.type.code\r\n            },\r\n            \"attributes\":\r\n                state.attributes.map(data => {\r\n                    return ({\r\n                        \"id\": data.id\r\n                    })\r\n                })\r\n            ,\r\n            \"operations\":\r\n                state.operations.map(data => {\r\n                    return ({\r\n                        \"id\": data.id\r\n                    })\r\n                })\r\n            ,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .post(`/manufacturers/${state.manufacturer.code}/models`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 모델 수정\r\n    updateToolsModel(state, callback) {\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"type\": {\r\n                \"code\": state.type.code\r\n            },\r\n            \"attributes\":\r\n                state.attributes.map(data => {\r\n                    return ({\r\n                        \"id\": data.id\r\n                    })\r\n                })\r\n            ,\r\n            \"operations\":\r\n                state.operations.map(data => {\r\n                    return ({\r\n                        \"id\": data.id\r\n                    })\r\n                })\r\n            ,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .put(`/manufacturers/${state.manufacturer.code}/models/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 디바이스 전체 조회\r\n    getToolsDeviceList(pageState, callback) {\r\n        axios\r\n            .get(`/devices?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&${pageState.categoryCode}=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 디바이스 상세 조회\r\n    getToolsDeviceOne(deviceId, callback) {\r\n        axios\r\n            .get(`/devices/${deviceId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 디바이스 삭제\r\n    removeToolsDeviceList(items, callback) {\r\n        const list = items.map(deviceId => {\r\n            return axios.delete(`/devices/${deviceId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 디바이스 추가\r\n    addToolsDevice(state, callback) {\r\n        const body = {\r\n            name: state.name,\r\n            model: {\r\n                modelId: state.model.modelId\r\n            },\r\n            serialNumber: state.serialNumber,\r\n            usable: state.usable\r\n        }\r\n        axios\r\n            .post(`/devices`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 디바이스 수정\r\n    updateToolsDevice(state, callback) {\r\n        const body = {\r\n            name: state.name,\r\n            model: {\r\n                modelId: state.model.modelId\r\n            },\r\n            serialNumber: state.serialNumber,\r\n            usable: state.usable\r\n        }\r\n        axios\r\n            .put(`/devices/${state.deviceId}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 제조사 전체 조회\r\n    getToolsManufacturerList(pageState, callback) {\r\n        axios\r\n            .get(`/manufacturers?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 제조사 상세 조회\r\n    getToolsManufacturerOne(code, callback) {\r\n        axios\r\n            .get(`/manufacturers/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 제조사 등록시 제조사코드 중복 체크\r\n    chkDuplicateToolsManufacturer(code, callback) {\r\n        axios\r\n            // .get(`/manufacturers?code=${code}`)\r\n            .get(`/manufacturers/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장비 - 제조사 삭제\r\n    removeToolsManufacturerList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/manufacturers/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 제조사 추가\r\n    addToolsManufacturer(state, callback) {\r\n        console.log(state);\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .post(`/manufacturers`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 제조사 수정\r\n    updateToolsManufacturer(state, callback) {\r\n        const body = {\r\n            \"code\": state.code,\r\n            \"name\": state.name,\r\n            \"usable\": state.usable\r\n        }\r\n        axios\r\n            .put(`/manufacturers/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 속성 전체 조회\r\n    getToolsPropertyList(pageState, callback) {\r\n        axios\r\n            .get(`/models/properties?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 속성 상세 조회\r\n    getToolsPropertyOne(code, callback) {\r\n        axios\r\n            .get(`/models/properties/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 제조사 삭제\r\n    removeToolsPropertyList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/models/properties/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장비 - 제조사 추가\r\n    addToolsProperty(state, callback) {\r\n        let body = {};\r\n        if (state.valueType === 'RANGE') {\r\n            body = {\r\n                code: state.code,\r\n                name: state.name,\r\n                valueType: state.valueType,\r\n                bottomValue: state.bottomValue,\r\n                topValue: state.topValue,\r\n                resolution: state.resolution,\r\n                unit: state.unit,\r\n            };\r\n        } else if (state.valueType === 'ENUMERATION') {\r\n            body = {\r\n                code: state.code,\r\n                name: state.name,\r\n                valueType: state.valueType,\r\n                availableValues: state.availableValues,\r\n            }\r\n        }\r\n        axios\r\n            .post(`/models/properties`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장비 - 제조사 수정\r\n    updateToolsProperty(state, callback) {\r\n        let body = {};\r\n        if (state.valueType === 'RANGE') {\r\n            body = {\r\n                code: state.code,\r\n                name: state.name,\r\n                valueType: state.valueType,\r\n                bottomValue: state.bottomValue,\r\n                topValue: state.topValue,\r\n                resolution: state.resolution,\r\n                unit: state.unit\r\n            };\r\n        } else if (state.valueType === 'ENUMERATION') {\r\n            body = {\r\n                code: state.code,\r\n                name: state.name,\r\n                valueType: state.valueType,\r\n                availableValues: state.availableValues,\r\n            }\r\n        }\r\n        axios\r\n            .put(`/models/properties/${state.id}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 고객사 전체 조회\r\n    getCustomerList(pageState, callback) {\r\n        axios\r\n            .get(`/customers?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 고객사 상세 조회\r\n    getCustomerOne(code, callback) {\r\n        axios\r\n            .get(`/customers/${code}`)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    if (response.data.imageId && response.data.imageId !== \"\") {\r\n                        this.getCustomerImg(response.data.imageId, (response2) => {\r\n                            const imageDataUrl = imageEncode(response2.data);\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        });\r\n                    } else {\r\n                        callback(response);\r\n                    }\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 고객사 중복 체크\r\n    chkDuplicateCustomer(code, callback) {\r\n        axios\r\n            .get(`/customers/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장소 - 고객사 삭제\r\n    removeCustomerList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/customers/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 고객사 추가\r\n    addCustomer(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.customerImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: imageId,\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .post(`/customers`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: '',\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/customers/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            axios\r\n                .post(`/customers`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n\r\n    },\r\n\r\n    // 장소 - 고객사 수정\r\n    updateCustomer(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.customerImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: imageId,\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/customers/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: '',\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/customers/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            axios\r\n                .put(`/customers/${state.code}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 고객사 이미지업로드\r\n    customerImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('file', blob);\r\n        form.append('target', \"dev-placement-smartiok\");\r\n        form.append('path', \"customer\");\r\n\r\n        axios\r\n            // .post(`/placement/customer/images`, form)\r\n            .post(`/files/upload`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    // 장소 - 고객사 이미지조회\r\n    getCustomerImg(imageId, callback) {\r\n        axios\r\n            // .get(`/placement/customer/images/view/${imageId}`, {\r\n            .get(`/files/${imageId}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ', error);\r\n                callback({data: null});\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 전체 조회\r\n    getSitePlaceList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.siteCode ? \"&site.code=\" + pageState.siteCode : '';\r\n        axios\r\n            .get(`/sites/places?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                // siteCode param으로 조회시 데이터가 없으면 undefined반환\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error);\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 상세 조회\r\n    getSitePlaceOne(code, callback) {\r\n        axios\r\n            .get(`/sites/places/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 중복 체크\r\n    chkDuplicateSitePlace(state, callback) {\r\n        axios\r\n            .get(`/sites/places/${state.site.code}/${state.dong}/${state.ho}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 장소 삭제\r\n    removeSitePlaceList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/sites/places/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 장소 추가\r\n    addSitePlace(state, callback) {\r\n        console.log(\"addSitePlace\", state);\r\n        const body = {\r\n            ...state\r\n        }\r\n\r\n        axios\r\n            .post(`/sites/places`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 수정\r\n    updateSitePlace(state, callback) {\r\n        const body = {\r\n            ...state\r\n        }\r\n\r\n        axios\r\n            .put(`/sites/places/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 전체 조회\r\n    getSitesList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.customerCode ? \"&customerCode=\" + pageState.customerCode : '';\r\n        axios\r\n            .get(`/sites?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 상세 조회(codeArray)\r\n    getSitesOne(codeArray, callback) {\r\n        const list = codeArray.map(code => {\r\n            return axios.get(`/sites/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 상세 조회(code)\r\n    getSiteOne(code, callback) {\r\n        axios\r\n            .get(`/sites/${code}`)\r\n            .then((response) => {\r\n                if (response.data.siteImageId && response.data.siteImageId !== \"\") {\r\n                    this.getSiteImg(response.data.siteImageId, (response2) => {\r\n                        const imageDataUrl = imageEncode(response2.data);\r\n                        const resData = {\r\n                            data: {\r\n                                ...response.data,\r\n                                imageDataUrl: imageDataUrl,\r\n                            },\r\n                            status: 200,\r\n                        }\r\n                        callback(resData);\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 중복 체크\r\n    chkDuplicateSite(code, callback) {\r\n        axios\r\n            .get(`/sites/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 삭제\r\n    removeSitesList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/sites/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 추가\r\n    addSite(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.siteImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        customer: state.customer,\r\n                        region: state.region,\r\n                        siteImageId: imageId,\r\n                    }\r\n\r\n                    body.imageDataUrl = '';\r\n\r\n                    axios\r\n                        .post(`/sites`, body)\r\n                        .then((response) => {\r\n                            if (state.manufacturerCode !== \"\") {\r\n                                this.addHomenet(state);\r\n                            }\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        customer: state.customer,\r\n                        region: state.region,\r\n                        siteImageId: '',\r\n                    }\r\n\r\n                    body.imageDataUrl = '';\r\n\r\n                    axios\r\n                        .post(`/sites`, body)\r\n                        .then((response) => {\r\n                            if (state.manufacturerCode !== \"\") {\r\n                                this.addHomenet(state);\r\n                            }\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n                customer: state.customer,\r\n                region: state.region,\r\n            }\r\n\r\n            axios\r\n                .post(`/sites`, body)\r\n                .then((response) => {\r\n                    if (state.manufacturerCode !== \"\") {\r\n                        this.addHomenet(state);\r\n                    }\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 수정\r\n    updateSite(state, callback) {\r\n        console.log(\"updateSite\", state);\r\n        if (state.imageDataUrl !== '') {\r\n            this.siteImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        customer: state.customer,\r\n                        region: state.region,\r\n                        siteImageId: imageId,\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/sites/${state.code}`, body)\r\n                        .then((response) => {\r\n                            if (state.manufacturerCode !== \"\") {\r\n                                this.updateHomenet(state);\r\n                            }\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        customer: state.customer,\r\n                        region: state.region,\r\n                        siteImageId: '',\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/sites/${state.code}`, body)\r\n                        .then((response) => {\r\n                            if (state.manufacturerCode !== \"\") {\r\n                                this.updateHomenet(state);\r\n                            }\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n                customer: state.customer,\r\n                region: state.region,\r\n            }\r\n\r\n            axios\r\n                .put(`/sites/${state.code}`, body)\r\n                .then((response) => {\r\n                    if (state.manufacturerCode !== \"\") {\r\n                        this.updateHomenet(state);\r\n                    }\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 이미지업로드\r\n    siteImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('file', blob);\r\n        form.append('target', \"dev-placement-smartiok\");\r\n        form.append('path', \"site\");\r\n\r\n        axios\r\n            .post(`/files/upload`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 이미지조회\r\n    getSiteImg(imageId, callback) {\r\n        axios\r\n            .get(`/files/${imageId}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 홈넷연동정보 조회\r\n    getHomenetOne(siteCode, callback) {\r\n        axios\r\n            .get(`/homenets/connection/${siteCode}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                callback(error.response);\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 홈넷연동정보 삭제\r\n    removeHomenetList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/homenets/connection/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 홈넷연동정보 추가\r\n    addHomenet(state, callback) {\r\n        const body = {\r\n            siteCode: state.code,\r\n            customerCode: state.customer.code,\r\n            authorizationUrl: state.authorizationUrl,\r\n            controlUrl: state.controlUrl,\r\n            clientId: state.clientId,\r\n            clientSecret: state.clientSecret,\r\n            deviceModelCodes: state.deviceModelCodes,\r\n        }\r\n\r\n        axios\r\n            .post(`/homenets/connection`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 홈넷연동정보 수정\r\n    updateHomenet(state, callback) {\r\n        const body = {\r\n            siteCode: state.code,\r\n            customerCode: state.customer.code,\r\n            authorizationUrl: state.authorizationUrl,\r\n            controlUrl: state.controlUrl,\r\n            clientId: state.clientId,\r\n            clientSecret: state.clientSecret,\r\n            deviceModelCodes: state.deviceModelCodes,\r\n        }\r\n\r\n        axios\r\n            .put(`/homenets/connection/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 전체 조회\r\n    getFacilityList(pageState, callback) {\r\n        axios\r\n            .get(`/sites/facility?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}&site.code=${pageState.siteCode}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 상세 조회\r\n    getFacilityOne(code, callback) {\r\n        axios\r\n            .get(`/sites/facility/${code}`)\r\n            .then((response) => {\r\n                if (response.data.imageId && response.data.imageId !== \"\") {\r\n                    this.getFacilityImg(response.data.imageId, (response2) => {\r\n                        const imageDataUrl = imageEncode(response2.data);\r\n                        const resData = {\r\n                            data: {\r\n                                ...response.data,\r\n                                imageDataUrl: imageDataUrl,\r\n                            },\r\n                            status: 200,\r\n                        }\r\n                        callback(resData);\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 삭제\r\n    removeFacilityList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/sites/facility/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 추가\r\n    addFacility(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.facilityImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: imageId,\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .post(`/sites/facility`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: '',\r\n                    }\r\n\r\n                    axios\r\n                        .post(`/sites/facility`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            axios\r\n                .post(`/sites/facility`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 수정\r\n    updateFacility(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.facilityImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.id;\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: imageId,\r\n                    }\r\n                    body.imageDataUrl = '';\r\n                    axios\r\n                        .put(`/sites/facility/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        ...state,\r\n                        imageId: '',\r\n                    }\r\n\r\n                    axios\r\n                        .put(`/sites/facility/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            axios\r\n                .put(`/sites/facility/${state.code}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 이미지업로드\r\n    facilityImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('file', blob);\r\n        form.append('target', \"dev-placement-smartiok\");\r\n        form.append('path', \"facility\");\r\n\r\n        axios\r\n            .post(`/files/upload`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 - 시설물 이미지조회\r\n    getFacilityImg(imageId, callback) {\r\n        axios\r\n            .get(`/files/${imageId}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 전체 조회\r\n    getFloorPlanList(pageState, callback) {\r\n        axios\r\n            .get(`/sites/floor-plan?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&site.code=${pageState.siteCode}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 상세 조회\r\n    getFloorPlanOne(code, callback) {\r\n        axios\r\n            .get(`/sites/floor-plan/${code}`)\r\n            .then((response) => {\r\n                if ((response.data.basicImageId && response.data.basicImageId !== \"\") || (response.data.expandedImageId && response.data.expandedImageId !== \"\")) {\r\n                    const resData = {\r\n                        data: {\r\n                            ...response.data,\r\n                        },\r\n                        status: 200,\r\n                    }\r\n\r\n                    axios.all([this.getFloorPlanImg(response.data.basicImageId), this.getFloorPlanImg(response.data.expandedImageId)])\r\n                        .then(axios.spread(function (t1, t2) {\r\n                            const basicImageDataUrl = t1.data && imageEncode(t1.data);\r\n                            const expandedImageDataUrl = t2.data && imageEncode(t2.data);\r\n                            resData.data = {\r\n                                ...resData.data,\r\n                                basicImageDataUrl: basicImageDataUrl,\r\n                                expandedImageDataUrl: expandedImageDataUrl\r\n                            }\r\n\r\n                            console.log(resData);\r\n                            callback(resData);\r\n                        }))\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 삭제\r\n    removeFloorPlanList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/sites/floor-plan/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 추가\r\n    addFloorPlan(state, callback) {\r\n\r\n        console.log(\"addFloorPlan\", state);\r\n\r\n        if (state.basicImageDataUrl !== '' || state.expandedImageDataUrl !== '') {\r\n            const body = {\r\n                ...state,\r\n            };\r\n            let rtnBasic = false;\r\n            let rtnExpanded = false;\r\n            if (state.basicImageDataUrl !== '') {\r\n                this.floorPlanImgUpload(state.basicImageDataUrl, (response) => {\r\n                    if (response.status === 200) {\r\n                        const imageId = response.data.id;\r\n                        body.basicImageId = imageId;\r\n                        body.basicImageDataUrl = '';\r\n                        rtnBasic = true;\r\n                        sendAxios();\r\n                    } else if (response === 'error') {\r\n                        body.basicImageId = undefined;\r\n                        body.basicImageDataUrl = '';\r\n                        rtnBasic = true;\r\n                        sendAxios();\r\n                    }\r\n                });\r\n            } else {\r\n                body.basicImageId = undefined;\r\n                body.basicImageDataUrl = '';\r\n                rtnBasic = true;\r\n                sendAxios()\r\n            }\r\n\r\n            if (state.expandedImageDataUrl !== '') {\r\n                this.floorPlanImgUpload(state.expandedImageDataUrl, (response) => {\r\n                    if (response.status === 200) {\r\n                        const imageId = response.data.id;\r\n                        body.expandedImageId = imageId;\r\n                        body.expandedImageDataUrl = '';\r\n                        rtnExpanded = true;\r\n                        sendAxios()\r\n                    } else if (response === 'error') {\r\n                        body.expandedImageId = undefined;\r\n                        body.expandedImageDataUrl = '';\r\n                        rtnExpanded = true;\r\n                        sendAxios()\r\n                    }\r\n                });\r\n            } else {\r\n                body.expandedImageId = undefined;\r\n                body.expandedImageDataUrl = '';\r\n                rtnExpanded = true;\r\n                sendAxios()\r\n            }\r\n\r\n            function sendAxios() {\r\n                if (rtnBasic && rtnExpanded) {\r\n\r\n                    axios\r\n                        .post(`/sites/floor-plan`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            }\r\n\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            body.basicImageId = undefined;\r\n            body.expandedImageId = undefined;\r\n\r\n            axios\r\n                .post(`/sites/floor-plan`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 수정\r\n    updateFloorPlan(state, callback) {\r\n        console.log(\"addFloorPlan\", state);\r\n\r\n        if (state.basicImageDataUrl !== '' || state.expandedImageDataUrl !== '') {\r\n\r\n            const body = {\r\n                ...state,\r\n            };\r\n            let rtnBasic = false;\r\n            let rtnExpanded = false;\r\n            if (state.basicImageDataUrl !== '') {\r\n                this.floorPlanImgUpload(state.basicImageDataUrl, (response) => {\r\n                    if (response.status === 200) {\r\n                        const imageId = response.data.id;\r\n                        body.basicImageId = imageId;\r\n                        body.basicImageDataUrl = '';\r\n                        rtnBasic = true;\r\n                        sendAxios();\r\n                    } else if (response === 'error') {\r\n                        body.basicImageId = undefined;\r\n                        body.basicImageDataUrl = '';\r\n                        rtnBasic = true;\r\n                        sendAxios();\r\n                    }\r\n                });\r\n            } else {\r\n                rtnBasic = true;\r\n                sendAxios()\r\n            }\r\n\r\n            if (state.expandedImageDataUrl !== '') {\r\n                this.floorPlanImgUpload(state.expandedImageDataUrl, (response) => {\r\n                    if (response.status === 200) {\r\n                        const imageId = response.data.id;\r\n                        body.expandedImageId = imageId;\r\n                        body.expandedImageDataUrl = '';\r\n                        rtnExpanded = true;\r\n                        sendAxios()\r\n                    } else if (response === 'error') {\r\n                        body.expandedImageId = undefined;\r\n                        body.expandedImageDataUrl = '';\r\n                        rtnExpanded = true;\r\n                        sendAxios()\r\n                    }\r\n                });\r\n            } else {\r\n                rtnExpanded = true;\r\n                sendAxios()\r\n            }\r\n\r\n            function sendAxios() {\r\n                if (rtnBasic && rtnExpanded) {\r\n\r\n                    axios\r\n                        .put(`/sites/floor-plan/${state.code}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            }\r\n\r\n        } else {\r\n            const body = {\r\n                ...state,\r\n            }\r\n\r\n            body.basicImageId = undefined;\r\n            body.expandedImageId = undefined;\r\n\r\n            axios\r\n                .put(`/sites/floor-plan/${state.code}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 이미지업로드\r\n    async floorPlanImgUpload(imageDataUrl, callback) {\r\n        let blob = dataURLtoBlob(imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('file', blob);\r\n        form.append('target', \"dev-placement-smartiok\");\r\n        form.append('path', \"facility\");\r\n\r\n        await axios\r\n            .post(`/files/upload`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 - 평면도 이미지조회\r\n    getFloorPlanImg(imageId) {\r\n        console.log(imageId);\r\n        if (!imageId) return {data: undefined};\r\n        return axios\r\n            .get(`/files/${imageId}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 지역코드 전체 조회\r\n    getRegionList(callback) {\r\n        axios\r\n            .get(`/regions`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 프로그램 전체 조회\r\n    getProgramList(pageState, callback) {\r\n        axios\r\n            .get(`/system/program?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 프로그램 삭제\r\n    removeProgramList(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/system/program/${code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 프로그램 추가\r\n    addProgram(items, callback) {\r\n\r\n        if (items.length > 0) {\r\n            const list = items.map(data => {\r\n                return axios.post(`/system/program`, data)\r\n            });\r\n\r\n            axios\r\n                .all(list)\r\n                .then((response) => {\r\n                    callback(true);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                });\r\n        }\r\n    },\r\n\r\n    // 설정 - 프로그램 수정\r\n    updateProgram(items, callback) {\r\n\r\n        if (items.length > 0) {\r\n\r\n            const list = items.map(data => {\r\n                return axios.put(`/system/program/${data.code}`, data)\r\n            });\r\n\r\n            axios\r\n                .all(list)\r\n                .then((response) => {\r\n                    callback(true);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                });\r\n        }\r\n    },\r\n\r\n    // 설정 - 메뉴 목록 조회(트리형)\r\n    getMenuTreeList(pageState, callback) {\r\n        axios\r\n            .get(`/system/menu/getTree/${pageState.codeType}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 메뉴 상세 조회\r\n    getMenuOne(menuId, callback) {\r\n        axios\r\n            .get(`/system/menu/${menuId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 메뉴 삭제\r\n    removeMenu(menuId, callback) {\r\n        axios\r\n            .delete(`/system/menu/${menuId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 메뉴 등록\r\n    addMenu(menuParam, callback) {\r\n        axios\r\n            .post(`system/menu`, menuParam)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 메뉴 수정\r\n    updateMenu(menuParam, callback) {\r\n        axios\r\n            .put(`system/menu/${menuParam.menuId}`, menuParam)\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 권한그룹설정 목록(메뉴별)\r\n    getAuthGroupMenuList(menuId, callback) {\r\n        axios\r\n            .get(`/system/authGroupMenu/menu/${menuId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 권한그룹설정 삭제\r\n    removeAuthGroupMenu(authGroupMenuId, callback) {\r\n        axios\r\n            .delete(`/system/authGroupMenu/${authGroupMenuId}`)\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 권한그룹설정 등록\r\n    addAuthGroupMenu(addForm, callback) {\r\n        axios\r\n            .post(`/system/authGroupMenu`, addForm)\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 권한그룹설정 수정\r\n    updateAuthGroupMenu(authGroupMenuId, updateForm) {\r\n        axios\r\n            .put(`/system/authGroupMenu/${authGroupMenuId}`, updateForm)\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 코드유형 목록 조회\r\n    getCodeTypeList(pageState, callback) {\r\n        axios\r\n            .get(`/system/codeType?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&name=${pageState.searchText}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 코드유형 상세 조회\r\n    getCodeTypeOne(codeType, callback) {\r\n        axios\r\n            .get(`/system/codeType/${codeType}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 설정 - 코드유형 삭제\r\n    removeCodeTypeList(items, callback) {\r\n        const list = items.map(codeType => {\r\n            return axios.delete(`/system/codeType/${codeType}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드유형 등록\r\n    addCodeType(state, callback) {\r\n        axios\r\n            .post(`/system/codeType`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드유형 수정\r\n    updateCodeType(state, callback) {\r\n        const body = {};\r\n        axios\r\n            .put(`/system/codeType/${state.code}`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드 목록 조회(타입별)\r\n    getCodeList(codeType, callback) {\r\n        axios\r\n            .get(`/system/code?codeType=${codeType}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드 상세 조회\r\n    getCodeOne(codeId, callback) {\r\n        axios\r\n            .get(`/system/code/${codeId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드 삭제\r\n    removeCode(codeId, callback) {\r\n        axios\r\n            .delete(`/system/code/${codeId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드 등록\r\n    addCode(state, callback) {\r\n        axios\r\n            .post(`/system/code`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 409) {\r\n                    callback(error.response);\r\n                }\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 코드 수정\r\n    updateCode(state, callback) {\r\n        axios\r\n            .put(`/system/code/${state.id}`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 약관 목록\r\n    getPolicyList(pageState, callback) {\r\n        axios\r\n            .get(`/system/policy?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&customer.code=${pageState.customer.code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 약관 상세\r\n    getPolicyOne(policyId, callback) {\r\n        axios\r\n            .get(`/system/policy/${policyId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 약관 삭제\r\n    removePolicyList(items, callback) {\r\n        const list = items.map(policyId => {\r\n            return axios.delete(`/system/policy/${policyId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 약관 등록\r\n    addPolicy(state, callback) {\r\n        axios\r\n            .post(`/system/policy`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 설정 - 약관 수정\r\n    updatePolicy(state, callback) {\r\n        axios\r\n            .put(`/system/policy/${state.policyId}`, state)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    // 이력 - 디바이스 이력 전체 조회(고객사 필수 선택)\r\n    getDeviceHistoryList(pageState, callback) {\r\n        axios\r\n            .get(`/customers/${pageState.customerCode}/statuses/logs?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}&startTime=${pageState.searchStartDate}&endTime=${pageState.searchEndDate}&deviceId=${pageState.searchText2}&username=${pageState.searchText}&siteCode=${pageState.siteCode}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 공지사항 목록\r\n    getNoticeList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchCategory3 ? \"&classification=\" + pageState.searchCategory3 : '';\r\n        axios\r\n            //.get(`/community/notice?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .get(`/community/notice`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 공지사항 상세\r\n    getNoticeOne(noticeId, callback) {\r\n        axios\r\n            .get(`/community/notice/${noticeId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getNoticeImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = imageEncode(response2.data);\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 공지사항 등록\r\n    addNotice(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.noticeImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"mainNotice\": state.mainNotice,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"dong\": state.dong ? state.dong : \"ALL\",\r\n                        \"ho\": state.ho ? state.ho : \"ALL\",\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"image\": [imageId],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .post(`/community/notice`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                            console.log(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"mainNotice\": state.mainNotice,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"dong\": state.dong ? state.dong : \"ALL\",\r\n                        \"ho\": state.ho ? state.ho : \"ALL\",\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"image\": [''],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .post(`/community/notice`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                            console.log(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"classification\": state.classification,\r\n                \"mainNotice\": state.mainNotice,\r\n                \"title\": state.title,\r\n                \"contents\": state.contents,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"dong\": state.dong ? state.dong : \"ALL\",\r\n                \"ho\": state.ho ? state.ho : \"ALL\",\r\n                \"startDate\": state.startDate,\r\n                \"endDate\": state.endDate,\r\n                \"image\": [],\r\n                \"publicYn\": state.publicYn\r\n            }\r\n            axios\r\n                .post(`/community/notice`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    //커뮤니티 - 공지사항 수정\r\n    updateNotice(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.noticeImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"mainNotice\": state.mainNotice,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"dong\": state.dong ? state.dong : \"ALL\",\r\n                        \"ho\": state.ho ? state.ho : \"ALL\",\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"image\": [imageId],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .put(`/community/notice/${state.noticeId}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                            console.log(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"mainNotice\": state.mainNotice,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"dong\": state.dong ? state.dong : \"ALL\",\r\n                        \"ho\": state.ho ? state.ho : \"ALL\",\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"image\": [''],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .put(`/community/notice/${state.noticeId}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                            console.log(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"classification\": state.classification,\r\n                \"mainNotice\": state.mainNotice,\r\n                \"title\": state.title,\r\n                \"contents\": state.contents,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"dong\": state.dong ? state.dong : \"ALL\",\r\n                \"ho\": state.ho ? state.ho : \"ALL\",\r\n                \"startDate\": state.startDate,\r\n                \"endDate\": state.endDate,\r\n                \"image\": state.image ? state.image : [],\r\n                \"publicYn\": state.publicYn\r\n            }\r\n            axios\r\n                .put(`/community/notice/${state.noticeId}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 커뮤니티 - 이미지조회\r\n    getNoticeImg(image, callback) {\r\n        axios\r\n            .get(`/community/notice/image/view/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 이미지업로드\r\n    noticeImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('image', blob);\r\n\r\n        axios\r\n            .post(`/community/notice/image`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 공지사항 삭제\r\n    removeNotice(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/notice/${code.noticeId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - Feed 목록\r\n    getFeedList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchStartDate ? \"&searchStartDate=\" + pageState.searchStartDate : '';\r\n        searchCondition += pageState.searchEndDate ? \"&searchEndDate=\" + pageState.searchEndDate : '';\r\n\r\n        axios\r\n            .get(`/community/feed?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - Feed 상세\r\n    getFeedOne(feedId, callback) {\r\n        axios\r\n            .get(`/community/feed/${feedId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getFeedImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = imageEncode(response2.data);\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - feed이미지조회\r\n    getFeedImg(image, callback) {\r\n        axios\r\n            .get(`/community/feed/image/view/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - Feed 댓글 리스트\r\n    getFeedCommentList(pageState, callback) {\r\n        axios\r\n            .get(`/community/feed/${pageState.feedId}/comments?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - FAQ 리스트\r\n    getFaqList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchText ? \"&title=\" + pageState.searchText : '';\r\n        axios\r\n            .get(`/community/faq?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - FAQ 상세\r\n    getFaqOne(faqId, callback) {\r\n        axios\r\n            .get(`/community/faq/${faqId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getFaqImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = imageEncode(response2.data);\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - FAQ 이미지 가져오기\r\n    getFaqImg(image, callback) {\r\n        axios\r\n            .get(`/community/faq/image/view/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - FAQ 이미지업로드\r\n    faqImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('image', blob);\r\n\r\n        axios\r\n            .post(`/community/faq/image`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - FAQ 등록\r\n    addFaq(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.faqImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"image\": [imageId],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .post(`/community/faq`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"image\": [''],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .post(`/community/faq`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"classification\": state.classification,\r\n                \"title\": state.title,\r\n                \"contents\": state.contents,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"image\": [],\r\n                \"publicYn\": state.publicYn\r\n            }\r\n            axios\r\n                .post(`/community/faq`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    //커뮤니티 - FAQ 수정\r\n    updateFaq(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.faqImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"image\": [imageId],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .put(`/community/faq/${state.faqId}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"classification\": state.classification,\r\n                        \"title\": state.title,\r\n                        \"contents\": state.contents,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"image\": [''],\r\n                        \"publicYn\": state.publicYn\r\n                    }\r\n                    axios\r\n                        .put(`/community/faq/${state.faqId}`, body)\r\n                        .then((response) => {\r\n                            callback(response);\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"classification\": state.classification,\r\n                \"title\": state.title,\r\n                \"contents\": state.contents,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"image\": state.image ? state.image : [],\r\n                \"publicYn\": state.publicYn\r\n            }\r\n            axios\r\n                .put(`/community/faq/${state.faqId}`, body)\r\n                .then((response) => {\r\n                    callback(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    //커뮤니티 - FAQ 삭제\r\n    removeFaq(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/faq/${code.faqId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - QaA 리스트\r\n    getQnaList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchText ? \"&title=\" + pageState.searchText : '';\r\n\r\n        axios\r\n            .get(`/community/qna?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - QaA 상세\r\n    getQnaOne(questionId, callback) {\r\n        axios\r\n            .get(`/community/qna/${questionId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getQnaImg(response.data.image, (response2) => {\r\n                        const imgeDataUrlList = [];\r\n                        response2.map(img => {\r\n                            if (img.status === 200) {\r\n                                const imageDataUrl = imageEncode(img.data);\r\n                                imgeDataUrlList.push(imageDataUrl);\r\n                            }\r\n\r\n                        })\r\n                        const resData = {\r\n                            data: {\r\n                                ...response.data,\r\n                                imageDataUrl: imgeDataUrlList,\r\n                            },\r\n                            status: 200,\r\n                        }\r\n                        callback(resData);\r\n\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - QaA 이미지 가져오기\r\n    getQnaImg(image, callback) {\r\n        const list = image.map(img => {\r\n            return axios.get(`/community/qna/image/view/${img}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n        });\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - QaA 답변 리스트\r\n    getQnaAnswerList(questionId, callback) {\r\n        axios\r\n            .get(`/community/qna/${questionId}/answer`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n    },\r\n\r\n    //커뮤니티 - QaA 답변 상세\r\n    getQnaAnswerOne(state, callback) {\r\n        axios\r\n            .get(`/community/qna/${state.questionId}/answer/${state.answerId}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n    },\r\n\r\n    //커뮤니티 - QaA 답변 등록\r\n    addQnaAnswer(state, callback) {\r\n        const body = {\r\n            contents: state.contents,\r\n            finished: state.finished,\r\n            user: {\r\n                username: state.userInfo.username,\r\n                userFullName: state.userInfo.userFullName,\r\n                picture: state.userInfo.picture,\r\n                name: state.userInfo.name,\r\n                contact: state.userInfo.contact,\r\n                email: state.userInfo.email\r\n            }\r\n        }\r\n        axios\r\n            .post(`/community/qna/${state.questionId}/answer`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n    },\r\n\r\n    //커뮤니티 - QaA 답변 수정\r\n    updateQnaAnswer(state, callback) {\r\n        const body = {\r\n            contents: state.contents,\r\n            finished: state.finished,\r\n            user: {\r\n                username: state.userInfo.username,\r\n                userFullName: state.userInfo.userFullName,\r\n                picture: state.userInfo.picture,\r\n                name: state.userInfo.name,\r\n                contact: state.userInfo.contact,\r\n                email: state.userInfo.email\r\n            }\r\n        }\r\n        axios\r\n            .put(`/community/qna/${state.questionId}/answer/${state.answerId}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n    },\r\n\r\n    //커뮤니티 - QaA 답변 삭제\r\n    removeQnaAnswer(items, callback) {\r\n        const list = items.map(item => {\r\n            return axios.delete(`/community/qna/${item.questionId}/answer/${item.answerId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - 유형코드 리스트 검색 \r\n    getCommunityCodeTypeList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchText ? \"&name=\" + pageState.searchText : '';\r\n        axios\r\n            .get(`/community/codeType?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 유형코드 상세 검색 \r\n    getCommunityCodeTypeOne(code, callback) {\r\n        axios\r\n            .get(`/community/codeType/${code}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 유형코드 저장\r\n    addCommunityCodeType(state, callback) {\r\n        const body = {\r\n            code: state.code,\r\n            name: state.name,\r\n            usable: state.usable,\r\n        }\r\n\r\n        axios\r\n            .post(`/community/codeType`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 유형코드 수정\r\n    updateCommunityCodeType(state, callback) {\r\n        const body = {\r\n            name: state.name,\r\n            usable: state.usable,\r\n        }\r\n\r\n        axios\r\n            .put(`/community/codeType/${state.code}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 유형코드 삭제\r\n    removeCommunityCodeType(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/codeType/${code.code}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - 코드 검색 \r\n    async getCommunityCode(codeType, callback) {\r\n        await axios\r\n            .get(`/community/code?codeType=${codeType}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 코드 검색 \r\n    getCommunityCodeOne(id, callback) {\r\n        axios\r\n            .get(`/community/code/${id}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 코드 저장\r\n    addCommunityCode(state, callback) {\r\n        const body = {\r\n            codeType: state.codeType,\r\n            code: state.code,\r\n            name: state.name,\r\n            attribute1: state.attribute1,\r\n            attribute2: state.attribute2,\r\n            attribute3: state.attribute3,\r\n            attribute4: state.attribute4,\r\n            attribute5: state.attribute5,\r\n            sort: state.sort,\r\n            usable: state.usable,\r\n        }\r\n\r\n        axios\r\n            .post(`/community/code`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.response.status === 409) {\r\n                    callback(error.response);\r\n                }\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 코드 수정\r\n    updateCommunityCode(state, callback) {\r\n        const body = {\r\n            codeType: state.codeType,\r\n            code: state.code,\r\n            name: state.name,\r\n            attribute1: state.attribute1,\r\n            attribute2: state.attribute2,\r\n            attribute3: state.attribute3,\r\n            attribute4: state.attribute4,\r\n            attribute5: state.attribute5,\r\n            sort: state.sort,\r\n            usable: state.usable,\r\n        }\r\n\r\n        axios\r\n            .put(`/community/code/${state.id}`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 코드 삭제\r\n    removeCommunityCode(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/code/${code.id}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - 예약 리스트 검색\r\n    getReservationList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchCategory3 ? \"&groupCode=\" + pageState.searchCategory3 : '';\r\n        axios\r\n            .get(`/community/reservation/item?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 예약 상세 검색 \r\n    getReservationOne(itemId, callback) {\r\n        axios\r\n            .get(`/community/reservation/item/${itemId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getReservationImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = imageEncode(response2.data);\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 예약 휴일 검색 \r\n    getHolidayList(itemId, callback) {\r\n        axios\r\n            .get(`/community/reservation/item/${itemId}/holiday`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 예약 현황 목록\r\n    getReservationConditionList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&status=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchText ? \"&user.userFullName=\" + pageState.searchText : '';\r\n        axios\r\n            .get(`/community/reservation/item/${pageState.itemId}/reservation?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 예약 이미지 가져오기\r\n    getReservationImg(image, callback) {\r\n        axios\r\n            .get(`/community/reservation/image/view/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 예약 이미지업로드\r\n    reservationImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('image', blob);\r\n\r\n        axios\r\n            .post(`/community/reservation/image`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 예약 등록\r\n    addReservation(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.reservationImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"name\": state.name,\r\n                        \"description\": state.description,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"groupCode\": {\r\n                            \"code\": state.groupCode.code,\r\n                        },\r\n                        \"period\": state.period,\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"startHour\": state.startHour,\r\n                        \"endHour\": state.endHour,\r\n                        \"timePeriod\": state.timePeriod,\r\n                        \"image\": [imageId],\r\n                        \"usable\": state.usable\r\n                    }\r\n                    axios\r\n                        .post(`/community/reservation/item`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200 || response.status === 201) {\r\n                                let holidayBody = {};\r\n                                const list = state.newHoliday.map(hDay => {\r\n                                    holidayBody = {\r\n                                        \"holiday\": hDay.holiday,\r\n                                    }\r\n                                    return axios.post(`/community/reservation/item/${response.data.itemId}/holiday`, holidayBody)\r\n                                });\r\n                                axios\r\n                                    .all(list)\r\n                                    .then((response2) => {\r\n                                        callback(response);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('error : ' + JSON.stringify(error));\r\n                                    })\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"name\": state.name,\r\n                        \"description\": state.description,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"groupCode\": {\r\n                            \"code\": state.groupCode.code,\r\n                        },\r\n                        \"period\": state.period,\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"startHour\": state.startHour,\r\n                        \"endHour\": state.endHour,\r\n                        \"timePeriod\": state.timePeriod,\r\n                        \"image\": [''],\r\n                        \"usable\": state.usable\r\n                    }\r\n                    axios\r\n                        .post(`/community/reservation/item`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200 || response.status === 201) {\r\n                                let holidayBody = {};\r\n                                const list = state.newHoliday.map(hDay => {\r\n                                    holidayBody = {\r\n                                        \"holiday\": hDay.holiday,\r\n                                    }\r\n                                    return axios.post(`/community/reservation/item/${response.data.itemId}/holiday`, holidayBody)\r\n                                });\r\n                                axios\r\n                                    .all(list)\r\n                                    .then((response2) => {\r\n                                        callback(response);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('error : ' + JSON.stringify(error));\r\n                                    })\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"name\": state.name,\r\n                \"description\": state.description,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"groupCode\": {\r\n                    \"code\": state.groupCode.code,\r\n                },\r\n                \"period\": state.period,\r\n                \"startDate\": state.startDate,\r\n                \"endDate\": state.endDate,\r\n                \"startHour\": state.startHour,\r\n                \"endHour\": state.endHour,\r\n                \"timePeriod\": state.timePeriod,\r\n                \"image\": [],\r\n                \"usable\": state.usable\r\n            }\r\n            axios\r\n                .post(`/community/reservation/item`, body)\r\n                .then((response) => {\r\n                    if (response.status === 200 || response.status === 201) {\r\n                        let holidayBody = {};\r\n                        const list = state.newHoliday.map(hDay => {\r\n                            holidayBody = {\r\n                                \"holiday\": hDay.holiday,\r\n                            }\r\n                            return axios.post(`/community/reservation/item/${response.data.itemId}/holiday`, holidayBody)\r\n                        });\r\n                        axios\r\n                            .all(list)\r\n                            .then((response2) => {\r\n                                callback(response);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log('error : ' + JSON.stringify(error));\r\n                            })\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    //커뮤니티 - 예약 수정\r\n    updateReservation(state, callback) {\r\n        if (state.imageDataUrl !== '') {\r\n            this.reservationImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    const body = {\r\n                        \"name\": state.name,\r\n                        \"description\": state.description,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"groupCode\": {\r\n                            \"code\": state.groupCode.code,\r\n                        },\r\n                        \"period\": state.period,\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"startHour\": state.startHour,\r\n                        \"endHour\": state.endHour,\r\n                        \"timePeriod\": state.timePeriod,\r\n                        \"image\": [imageId],\r\n                        \"usable\": state.usable\r\n                    }\r\n                    axios\r\n                        .put(`/community/reservation/item/${state.itemId}`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200) {\r\n                                this.updateRegistRemoveHoliday(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    const body = {\r\n                        \"name\": state.name,\r\n                        \"description\": state.description,\r\n                        \"customer\": {\r\n                            \"code\": state.customer.code,\r\n                            \"name\": state.customer.name,\r\n                        },\r\n                        \"site\": {\r\n                            \"code\": state.site.code,\r\n                            \"name\": state.site.name,\r\n                        },\r\n                        \"groupCode\": {\r\n                            \"code\": state.groupCode.code,\r\n                        },\r\n                        \"period\": state.period,\r\n                        \"startDate\": state.startDate,\r\n                        \"endDate\": state.endDate,\r\n                        \"startHour\": state.startHour,\r\n                        \"endHour\": state.endHour,\r\n                        \"timePeriod\": state.timePeriod,\r\n                        \"image\": [''],\r\n                        \"usable\": state.usable\r\n                    }\r\n                    axios\r\n                        .put(`/community/reservation/item/${state.itemId}`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200) {\r\n                                this.updateRegistRemoveHoliday(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            const body = {\r\n                \"name\": state.name,\r\n                \"description\": state.description,\r\n                \"customer\": {\r\n                    \"code\": state.customer.code,\r\n                    \"name\": state.customer.name,\r\n                },\r\n                \"site\": {\r\n                    \"code\": state.site.code,\r\n                    \"name\": state.site.name,\r\n                },\r\n                \"groupCode\": {\r\n                    \"code\": state.groupCode.code,\r\n                },\r\n                \"period\": state.period,\r\n                \"startDate\": state.startDate,\r\n                \"endDate\": state.endDate,\r\n                \"startHour\": state.startHour,\r\n                \"endHour\": state.endHour,\r\n                \"timePeriod\": state.timePeriod,\r\n                \"image\": state.image ? state.image : [],\r\n                \"usable\": state.usable\r\n            }\r\n            axios\r\n                .put(`/community/reservation/item/${state.itemId}`, body)\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        this.updateRegistRemoveHoliday(state, (cb) => {\r\n                            if (cb) {\r\n                                callback(response);\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    updateRegistRemoveHoliday(state, cb) {\r\n        let result = true;\r\n        const originHoliday = state.holiday;\r\n        const newHoliday = state.newHoliday;\r\n\r\n        const originHolidayList = [];\r\n        const newHolidayList = [];\r\n        newHoliday.map(items => {\r\n            const holiday = items.holiday;\r\n            newHolidayList.push(holiday);\r\n        });\r\n\r\n        originHoliday.map(items => {\r\n            const holiday = items.holiday;\r\n            originHolidayList.push(holiday);\r\n        });\r\n\r\n        //휴일 삭제\r\n        const removeTargetList = [];\r\n        originHolidayList.map(holiday => {\r\n            // newHolidayList안에 originHoliday의 특정 일자가 없다.\r\n            if (newHolidayList.indexOf(holiday) === -1) {\r\n                removeTargetList.push(holiday);\r\n            }\r\n        });\r\n\r\n        const removeTargetInfoDataList = [];\r\n        originHoliday.map(data => {\r\n            const holiday = data.holiday;\r\n            if (removeTargetList.includes(holiday)) {\r\n                removeTargetInfoDataList.push(data);\r\n            }\r\n        })\r\n\r\n        const removeList = removeTargetInfoDataList.map((day) => {\r\n            return axios.delete(`/community/reservation/item/${day.itemId}/holiday/${day.id}`)\r\n        });\r\n        axios\r\n            .all(removeList)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                result = false;\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n        //휴일 등록\r\n        let insertHolidayBody = {};\r\n        const insertList = newHolidayList.map(newHoliday => {\r\n            if (originHolidayList.indexOf(newHoliday) === -1) {\r\n                insertHolidayBody = {\r\n                    \"holiday\": newHoliday,\r\n                }\r\n                return axios.post(`/community/reservation/item/${state.itemId}/holiday`, insertHolidayBody)\r\n            }\r\n        });\r\n        axios\r\n            .all(insertList)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                result = false;\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n        cb(result);\r\n    },\r\n\r\n    //커뮤니티 - 예약 삭제\r\n    removeReservation(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/reservation/item/${code.itemId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    //커뮤니티 - 주민투표 목록 검색 \r\n    getVoteList(pageState, callback) {\r\n        let searchCondition = \"\";\r\n        searchCondition += pageState.searchCategory1 ? \"&customer.code=\" + pageState.searchCategory1 : '';\r\n        searchCondition += pageState.searchCategory2 ? \"&site.code=\" + pageState.searchCategory2 : '';\r\n        searchCondition += pageState.searchCategory3 ? \"&status=\" + pageState.searchCategory3 : '';\r\n        searchCondition += pageState.searchText ? \"&title=\" + pageState.searchText : '';\r\n        axios\r\n            .get(`/community/vote?page=${pageState.currentPage}&sizePerPage=${pageState.rowPerPage}${searchCondition}`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 주민투표 상세 검색 \r\n    getVoteOne(voteId, callback) {\r\n        axios\r\n            .get(`/community/vote/${voteId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getVoteImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = response2.data;\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    getVoteResult(voteId, callback) {\r\n        axios\r\n            .get(`/community/vote/${voteId}/result`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    getVoteCountList(voteId, callback) {\r\n        axios\r\n            .get(`/community/vote/${voteId}/count`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    getVoteAgendaList(voteId, callback) {\r\n        axios\r\n            .get(`/community/vote/${voteId}/agenda`)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    getVoteAgendaOne(form, callback) {\r\n        axios\r\n            .get(`/community/vote/${form.voteId}/agenda/${form.agendaId}`)\r\n            .then((response) => {\r\n                if (response.data.image) {\r\n                    this.getVoteImg(response.data.image, (response2) => {\r\n                        if (response2.status === 200) {\r\n                            const imageDataUrl = response2.data;\r\n                            const resData = {\r\n                                data: {\r\n                                    ...response.data,\r\n                                    imageDataUrl: imageDataUrl,\r\n                                },\r\n                                status: 200,\r\n                            }\r\n                            callback(resData);\r\n                        }\r\n                    });\r\n                } else {\r\n                    callback(response);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 예약 등록\r\n    addVote(state, callback) {\r\n        const body = {\r\n            \"title\": state.title,\r\n            \"contents\": state.contents,\r\n            \"customer\": {\r\n                \"code\": state.customer.code,\r\n                \"name\": state.customer.name,\r\n            },\r\n            \"site\": {\r\n                \"code\": state.site.code,\r\n                \"name\": state.site.name,\r\n            },\r\n            \"classification\": state.classification,\r\n            \"dong\": state.dong ? state.dong : \"ALL\",\r\n            \"voteStartDate\": state.voteStartDate,\r\n            \"voteEndDate\": state.voteEndDate,\r\n            \"startDate\": state.startDate,\r\n            \"image\": [],\r\n            \"publicYn\": state.publicYn\r\n        }\r\n        if (state.imageDataUrl !== '') {\r\n            this.voteImgUpload(state, (response) => {\r\n                if (response.status === 200 || response.status === 201) {\r\n                    const imageId = response.data.imageId;\r\n                    body.image = [imageId];\r\n                    axios\r\n                        .post(`/community/vote`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200 || response.status === 201) {\r\n                                state.voteId = response.data.voteId;\r\n                                this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    body.image = [''];\r\n                    axios\r\n                        .post(`/community/vote`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200 || response.status === 201) {\r\n                                state.voteId = response.data.voteId;\r\n                                this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            axios\r\n                .post(`/community/vote`, body)\r\n                .then((response) => {\r\n                    if (response.status === 200 || response.status === 201) {\r\n                        state.voteId = response.data.voteId;\r\n                        this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                            if (cb) {\r\n                                callback(response);\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    //커뮤니티 - 예약 수정\r\n    updateVote(state, callback) {\r\n        const body = {\r\n            \"title\": state.title,\r\n            \"contents\": state.contents,\r\n            \"customer\": {\r\n                \"code\": state.customer.code,\r\n                \"name\": state.customer.name,\r\n            },\r\n            \"site\": {\r\n                \"code\": state.site.code,\r\n                \"name\": state.site.name,\r\n            },\r\n            \"classification\": state.classification,\r\n            \"dong\": state.dong ? state.dong : \"ALL\",\r\n            \"voteStartDate\": state.voteStartDate,\r\n            \"voteEndDate\": state.voteEndDate,\r\n            \"startDate\": state.startDate,\r\n            \"image\": state.image ? state.image : [],\r\n            \"publicYn\": state.publicYn\r\n        }\r\n        if (state.imageDataUrl !== '') {\r\n            this.voteImgUpload(state, (response) => {\r\n                if (response.status === 200) {\r\n                    const imageId = response.data.imageId;\r\n                    body.image = [imageId];\r\n                    axios\r\n                        .put(`/community/vote/${state.voteId}`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200) {\r\n                                this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                } else if (response === 'error') {\r\n                    body.image = [''];\r\n                    axios\r\n                        .put(`/community/vote/${state.voteId}`, body)\r\n                        .then((response) => {\r\n                            if (response.status === 200) {\r\n                                this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                                    if (cb) {\r\n                                        callback(response);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error : ' + JSON.stringify(error));\r\n                        })\r\n                }\r\n            });\r\n        } else {\r\n            axios\r\n                .put(`/community/vote/${state.voteId}`, body)\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        this.updateRegistRemoveVoteAgenda(state, (cb) => {\r\n                            if (cb) {\r\n                                callback(response);\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error : ' + JSON.stringify(error));\r\n                })\r\n        }\r\n    },\r\n\r\n    // 커뮤니티 - 투표 이미지 가져오기\r\n    getVoteImg(image, callback) {\r\n        axios\r\n            .get(`/community/vote/image/view/${image}`, {\r\n                responseType: 'arraybuffer'\r\n            })\r\n            .then((response) => {\r\n                response.data = imageEncode(response.data);\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 커뮤니티 - 투표 이미지업로드\r\n    voteImgUpload(formData, callback) {\r\n        let blob = dataURLtoBlob(formData.imageDataUrl);\r\n        let form = new FormData()\r\n        form.append('image', blob);\r\n\r\n        axios\r\n            .post(`/community/vote/image`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    //커뮤니티 - 투표 안건 수정, 삭제, 등록\r\n    updateRegistRemoveVoteAgenda(state, cb) {\r\n        let result = true;\r\n\r\n        //안건 삭제\r\n        const removeAgendaList = state.removeAgendaList;\r\n        const removeList = removeAgendaList.map(agendaId => {\r\n            return axios.delete(`/community/vote/${state.voteId}/agenda/${agendaId}`)\r\n        });\r\n        axios\r\n            .all(removeList)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                result = false;\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n\r\n        //안건 등록\r\n        const newAgenda = state.newAgenda;\r\n        const insertList = newAgenda.map((agenda, idx) => {\r\n            const voteNum = idx + 1;\r\n            agenda.voteNum = voteNum;\r\n            if (!agenda.agendaId) {\r\n                if (agenda.imageDataUrl) {\r\n                    this.voteImgUpload(agenda, (response) => {\r\n                        if (response.status === 200) {\r\n                            const imageId = response.data.imageId;\r\n                            const insertBody = {\r\n                                \"title\": agenda.title,\r\n                                \"contents\": agenda.contents,\r\n                                \"image\": [imageId],\r\n                                \"voteNum\": agenda.voteNum,\r\n                            }\r\n\r\n                            return axios.post(`/community/vote/${state.voteId}/agenda`, insertBody);\r\n                        } else if (response === 'error') {\r\n                            const insertBody = {\r\n                                \"title\": agenda.title,\r\n                                \"contents\": agenda.contents,\r\n                                \"image\": [''],\r\n                                \"voteNum\": agenda.voteNum,\r\n                            }\r\n\r\n                            return axios.post(`/community/vote/${state.voteId}/agenda`, insertBody);\r\n                        }\r\n                    });\r\n                } else {\r\n                    const insertBody = {\r\n                        \"title\": agenda.title,\r\n                        \"contents\": agenda.contents,\r\n                        \"image\": agenda.image ? agenda.image : [],\r\n                        \"voteNum\": agenda.voteNum,\r\n                    }\r\n                    return axios.post(`/community/vote/${state.voteId}/agenda`, insertBody);\r\n                }\r\n            }\r\n        });\r\n        axios\r\n            .all(insertList)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                result = false;\r\n            })\r\n\r\n        const updateList = newAgenda.map((agenda, idx) => {\r\n            if (agenda.agendaId) {\r\n\r\n                if (agenda.imageDataUrl) {\r\n                    this.voteImgUpload(agenda, (response) => {\r\n                        if (response.status === 200) {\r\n                            const imageId = response.data.imageId;\r\n                            const updateBody = {\r\n                                \"title\": agenda.title,\r\n                                \"contents\": agenda.contents,\r\n                                \"image\": [imageId],\r\n                                \"voteNum\": agenda.voteNum\r\n                            }\r\n\r\n                            return axios.put(`/community/vote/${state.voteId}/agenda/${agenda.agendaId}`, updateBody);\r\n                        } else if (response === 'error') {\r\n                            const updateBody = {\r\n                                \"title\": agenda.title,\r\n                                \"contents\": agenda.contents,\r\n                                \"image\": [''],\r\n                                \"voteNum\": agenda.voteNum\r\n                            }\r\n\r\n                            return axios.put(`/community/vote/${state.voteId}/agenda/${agenda.agendaId}`, updateBody);\r\n                        }\r\n                    });\r\n                } else {\r\n                    const updateBody = {\r\n                        \"title\": agenda.title,\r\n                        \"contents\": agenda.contents,\r\n                        \"image\": agenda.image ? agenda.image : [],\r\n                        \"voteNum\": agenda.voteNum\r\n                    }\r\n\r\n                    return axios.put(`/community/vote/${state.voteId}/agenda/${agenda.agendaId}`, updateBody);\r\n                }\r\n            }\r\n        });\r\n        axios\r\n            .all(updateList)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                result = false;\r\n            })\r\n\r\n        cb(result);\r\n    },\r\n\r\n    //커뮤니티 - 투표 삭제\r\n    removeVote(items, callback) {\r\n        const list = items.map(code => {\r\n            return axios.delete(`/community/vote/${code.voteId}`)\r\n        });\r\n\r\n        axios\r\n            .all(list)\r\n            .then((response) => {\r\n                callback(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            });\r\n    },\r\n\r\n    cloudnLogin(user, callback) {\r\n\r\n        let form = new FormData()\r\n        form.append('phone', user.phone);\r\n        form.append('pwd', user.pwd);\r\n\r\n        axios\r\n            .post(store.cloudn_api + `/login`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n    getCloudnDevices(request, callback) {\r\n\r\n        let form = new FormData()\r\n        form.append('salt', request.salt);\r\n\r\n        axios\r\n            .post(store.cloudn_api + `/device/list`, form)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 추가\r\n    addPlace(state, callback) {\r\n        const body = {\r\n            ...state\r\n        }\r\n\r\n        axios\r\n            .post(`/places`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    // 장소 - 현장 장소 추가\r\n    getPlace(params, callback) {\r\n        const queryString = params.username ? `?username=${params.username}` : '';\r\n        axios\r\n            .get(`/places` + queryString)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n            })\r\n    },\r\n\r\n    addDeviceByODP(state, callback) {\r\n        const body = {\r\n            ...state\r\n        }\r\n\r\n        axios\r\n            .post(store.odp_api + `/indoor/device`, body)\r\n            .then((response) => {\r\n                callback(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log('error : ' + JSON.stringify(error));\r\n                if (error.name === 'Error') {\r\n                    callback('error');\r\n                }\r\n            })\r\n    }\r\n}","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\config\\config.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\aws-exports.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Header\\Header.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Footer\\Footer.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\Menu\\Menu.js",["234","235","236"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport classNames from 'classnames';\r\nimport './Menu.scss';\r\nimport store from '../../../stores/store';\r\nimport {ListItemLink} from \"../../../UI/molecules\";\r\n\r\nexport const Menu = (props) => {\r\n\r\n    const [routes, setRoutes] = useState([]);\r\n    const [leftMenuDisplay, setLeftMenuDisplay] = useState(true);\r\n    const menus = [\r\n        {\r\n            \"menuId\": \"1\",\r\n            \"menuGroup\": \"USER\",\r\n            \"menuName\": \"테스트\",\r\n            \"parentId\": \"string\",\r\n            \"level\": 0,\r\n            \"sort\": 2,\r\n            \"programCode\": \"text\",\r\n            \"program\": {\r\n                \"code\": \"10000\",\r\n                \"name\": \"프로그램 테스트\",\r\n                \"path\": \"/\",\r\n                \"authCheck\": true,\r\n                \"searchAuth\": true,\r\n                \"saveAuth\": true,\r\n                \"excelAuth\": false,\r\n                \"deleteAuth\": true,\r\n                \"remark\": \"string\"\r\n            },\r\n        },\r\n        {\r\n            \"menuId\": \"2\",\r\n            \"menuGroup\": \"USER\",\r\n            \"menuName\": \"공지사항\",\r\n            \"parentId\": \"1\",\r\n            \"level\": 1,\r\n            \"sort\": 2,\r\n            \"programCode\": \"text\",\r\n            \"program\": {\r\n                \"code\": \"10010\",\r\n                \"name\": \"공지사항\",\r\n                \"path\": \"/community/notice/list\",\r\n                \"authCheck\": true,\r\n                \"searchAuth\": true,\r\n                \"saveAuth\": true,\r\n                \"excelAuth\": false,\r\n                \"deleteAuth\": true,\r\n                \"remark\": \"string\"\r\n            },\r\n        },\r\n        {\r\n            \"menuId\": \"3\",\r\n            \"menuGroup\": \"USER\",\r\n            \"menuName\": \"테스트관리\",\r\n            \"parentId\": \"2\",\r\n            \"level\": 2,\r\n            \"sort\": 2,\r\n            \"programCode\": \"string\",\r\n            \"program\": {\r\n                \"code\": \"1\",\r\n                \"name\": \"프로그램 테스트\",\r\n                \"path\": \"/program/test\",\r\n                \"authCheck\": true,\r\n                \"searchAuth\": true,\r\n                \"saveAuth\": true,\r\n                \"excelAuth\": false,\r\n                \"deleteAuth\": true,\r\n                \"remark\": \"string\"\r\n            },\r\n        },\r\n        {\r\n            \"menuId\": \"3\",\r\n            \"menuGroup\": \"USER\",\r\n            \"menuName\": \"테스트관리\",\r\n            \"parentId\": \"2\",\r\n            \"level\": 2,\r\n            \"sort\": 2,\r\n            \"programCode\": \"string\",\r\n            \"program\": {\r\n                \"code\": \"1\",\r\n                \"name\": \"라우팅 테스트\",\r\n                \"path\": \"/community/notice/dfsdf\",\r\n                \"authCheck\": true,\r\n                \"searchAuth\": true,\r\n                \"saveAuth\": true,\r\n                \"excelAuth\": false,\r\n                \"deleteAuth\": true,\r\n                \"remark\": \"string\"\r\n            },\r\n        },\r\n        {\r\n            \"menuId\": \"4\",\r\n            \"menuGroup\": \"USER\",\r\n            \"menuName\": \"테이블 테스트\",\r\n            \"parentId\": \"0\",\r\n            \"level\": 1,\r\n            \"sort\": 1,\r\n            \"programCode\": \"string\",\r\n            \"program\": {\r\n                \"code\": \"1\",\r\n                \"name\": \"테이블 테스트\",\r\n                \"path\": \"/test\",\r\n                \"authCheck\": true,\r\n                \"searchAuth\": true,\r\n                \"saveAuth\": true,\r\n                \"excelAuth\": false,\r\n                \"deleteAuth\": true,\r\n                \"remark\": \"string\"\r\n            },\r\n        },\r\n\r\n    ];\r\n    useEffect(() => {\r\n        setRoutes(menus);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        props.onDrawer(leftMenuDisplay);\r\n    }, [leftMenuDisplay])\r\n\r\n    const displayHandler = () => {\r\n        setLeftMenuDisplay(!leftMenuDisplay);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classNames('menu_bg',\r\n                {'show' : leftMenuDisplay,\r\n                'hide' : !leftMenuDisplay})}>\r\n                {routes.map((route, index) => {\r\n                    return (\r\n                        <ListItemLink key={index} {...route} />\r\n                        // <ListItemLink_test key={index} {...route} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={classNames('position_abs', \r\n                {'l-210px' : leftMenuDisplay,\r\n                'l-0px' : !leftMenuDisplay})}>\r\n                <div className=\"left_menu_show_hide_btn\" onClick={displayHandler}>\r\n                    { leftMenuDisplay ? <button className=\"w-100 h-100\">접</button> : <button className=\"w-100 h-100\" /> }\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n        \r\n    );\r\n};","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\index.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\ListItemLink\\ListItemLink.js",["237","238"],"import React, { forwardRef, useMemo, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\nexport const ListItemLink = observer((props) => {\r\n    const {icon, children} = props;\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        if(props.program && props.program.path) {\r\n            sessionStorage.setItem('menuId', props.menuId);\r\n        }\r\n        setOpen(!open);\r\n    };\r\n\r\n    const RenderLink = useMemo(() => forwardRef((itemProps, ref) => {\r\n            let renderLi;\r\n            if(props.program && props.program.path) {\r\n                renderLi = <Link to={props.program.path} {...itemProps} />;\r\n            } else {\r\n                renderLi = <div {...itemProps} />;\r\n            }\r\n            return renderLi;\r\n        })\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.level === 0 &&\r\n                (\r\n                    <RenderLink className=\"menu_list4big\" onClick={handleOpen}>\r\n\r\n                        <p>{props.menuName}</p>\r\n\r\n                    </RenderLink>\r\n                )\r\n            }\r\n            {\r\n                props.level === 1 &&\r\n                (\r\n                    <RenderLink \r\n                        className={classNames('menu_list4middle',\r\n                            {\r\n                                'listOpen' : open && children,\r\n                            }\r\n                        )}\r\n                        onClick={handleOpen}\r\n                    >\r\n                        <p className={open && children ? 'ml-19' : 'ml-26'}>{props.menuName}</p>\r\n\r\n                    </RenderLink>\r\n                )\r\n            }\r\n            {\r\n                props.level === 2 &&\r\n                (\r\n                    <RenderLink \r\n                        className='menu_list4small'\r\n                        onClick={handleOpen}\r\n                    >\r\n                        <p>{props.menuName}</p>\r\n                    </RenderLink>\r\n                )\r\n            }\r\n\r\n            {children && open && (\r\n                children.map((route, index) => {\r\n                    return (<ListItemLink key={index} {...route} />)\r\n                })\r\n            )}\r\n        </>\r\n    )\r\n});","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\templates\\PageTemplate\\PageTemplate.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\About\\About.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Book\\BookList.js",["239","240","241"],"import { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport AddBook from \"../../../UI/molecules/Book/AddBook\";\nimport {Loading} from \"../../../UI/atoms\";\nimport BookItem from \"../../../UI/molecules/Book/BookItem\";\n\nfunction BookList() {\n  const [books, setBooks] = useState([]);\n\n  // useEffect(() => {\n  //   const db = firebase.firestore();\n  //\n  //   (async () => {\n  //     const snapshot = await db.collection(\"books\").get();\n  //     const booksArray = [];\n  //     snapshot.forEach((doc) => {\n  //       booksArray.push({\n  //         id: doc.id,\n  //         ...doc.data(),\n  //       });\n  //     });\n  //     setBooks(booksArray);\n  //   })();\n  // }, []);\n\n  return (\n    <div className=\"book-list\">\n      <AddBook />\n      <h2>Book list</h2>\n      {!books.length ? <Loading /> : books.map((book) => (\n        <BookItem book={book} key={book.id} />\n      ))}\n    </div>\n  );\n}\n\nexport default BookList;","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\BookItem.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\index.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\AddBook.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Loading.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Button.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Message.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Field.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Modal.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Book\\BookForm.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Radio\\CustomRadioButton.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\ImgUpload\\ImgUpload.js",["242"],"import { LocalConvenienceStoreOutlined } from '@material-ui/icons';\r\nimport React, {useState, useEffect} from 'react'\r\nimport './ImgUpload.scss';\r\n\r\nexport const ImgUpload = (props) => {\r\n    const {title, inputName, disabled} = props;\r\n    const [imgFileName, setImgFileName] = useState(\"\");\r\n    const [prevImgUrl, setPrevImgUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setPrevImgUrl(props.imgFile);\r\n    }, [props.imgFile])\r\n\r\n    const onChangeImg = (e) => {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n        if(file.size > 512000) {\r\n            alert('Image 사이즈가 500KB를 넘습니다.');\r\n            return;\r\n        }\r\n        reader.onloadend = () => {\r\n            props.imgUpload(reader.result);\r\n            setImgFileName(file.name);\r\n            setPrevImgUrl(reader.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    return (\r\n        <div className=\"imgUploadWrapper\">\r\n            <div className=\"flex fileArea\">\r\n                <span className=\"imgUploadTitle\">{title}</span>\r\n                <input className=\"upload-name\" value={imgFileName} disabled=\"disabled\"/>\r\n                <label htmlFor={inputName ? inputName : \"ex_filename\"}>찾아보기</label>\r\n                <input \r\n                    type=\"file\" \r\n                    id={inputName ? inputName : \"ex_filename\"}\r\n                    className=\"upload-hidden\" \r\n                    onChange={onChangeImg} \r\n                    accept=\".jpg,.jpeg,.png\"\r\n                    disabled={disabled}\r\n                />\r\n            </div>\r\n            <div className=\"flex j-c-c mt-7\">\r\n                <span className=\"imgUploadNotice\">※지원하는 파일 형식: JPG, PNG / 용량: 500KB 이내</span>\r\n            </div>\r\n            <div className=\"flex prevImgArea\">\r\n                <img \r\n                    className=\"imgFile\"\r\n                    src={prevImgUrl === undefined || prevImgUrl === \"\" || prevImgUrl === \"data:image/jpeg;base64,\" ? \"/noImage.jpg\" : prevImgUrl}\r\n                    alt=\"complex Img\"\r\n                    width={props.imgSize?props.imgSize:\"\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\SearchInputBar\\SearchInputBar.js",["243","244","245"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport CustomSelectBox from '../SelectBox/CustomSelectBox';\r\nimport DatePicker from \"react-datepicker\";\r\nimport './SearchInputBar.scss';\r\n\r\nconst threeDaysAgo = () => {\r\n    const d = new Date();\r\n    const dayOfMonth = d.getDate();\r\n    d.setDate(dayOfMonth - 3);\r\n    return d;\r\n}\r\n\r\nexport const SearchInputBar = (props) => {\r\n\r\n    const [state, setState] = useState({\r\n        searchCategoryGroup: props.searchCategoryGroup || [],\r\n        selectedCategory: (props.searchCategory && props.searchCategoryGroup[0][0].code) || [\"\", \"\"],\r\n        searchText: '',\r\n        searchText2: '',\r\n        searchStartDate: '',\r\n        searchEndDate: '',\r\n    });\r\n\r\n    const [startDate, setStartDate] = useState(threeDaysAgo());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        setState({\r\n            ...state,\r\n            searchCategoryGroup: props.searchCategoryGroup\r\n        })\r\n    }, [ props.searchCategoryGroup ])\r\n\r\n    useEffect(() => {\r\n        props.dynamicSearch && onSubmit('selectbox');\r\n    }, [ state.selectedCategory ])\r\n     \r\n    useEffect(() => {\r\n        dateChangeHandler();\r\n        if(props.searchDate) {\r\n            props.searchDate(startDate, endDate);\r\n        }\r\n    }, [ startDate, endDate ])\r\n\r\n    const onChangeHandler = (index, value) => {\r\n        \r\n        let newArr = [];\r\n\r\n        if(props.relateCategoryHandler){\r\n            if(index === 0){\r\n                props.relateCategoryHandler(value?value:\"reset\");\r\n                newArr = [...state.selectedCategory];\r\n                newArr[0] = value;\r\n                newArr[1] = \"\";\r\n            } else {\r\n                newArr = [...state.selectedCategory];\r\n                newArr[index] = value;\r\n            }\r\n        } else {\r\n            newArr = [...state.selectedCategory];\r\n            newArr[index] = value;\r\n        }\r\n       \r\n        setState({\r\n            ...state,\r\n            selectedCategory: newArr,\r\n        })\r\n    }\r\n\r\n    const onSubmit = (type) => {\r\n        if(props.searchDate){\r\n            if(!startDate && !endDate){\r\n\r\n            } else if(!startDate) {\r\n                alert(\"검색 시작일자를 입력해주세요.\");\r\n                return false;\r\n            } else if(!endDate) {\r\n                alert(\"검색 종료일자를 입력해주세요.\");\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        if(type) {\r\n            state.type = type;\r\n        }\r\n        props.onSubmit(state);\r\n    }\r\n\r\n    const keyPressHandler = (e, type) => {\r\n        if(e.key === 'Enter') {\r\n            onSubmit(type);\r\n        }\r\n    }\r\n\r\n    const dateChangeHandler = () => {\r\n        if(startDate && endDate){\r\n            const startDateFormating = startDate.getFullYear() + '-' + ('0' + (Number(startDate.getMonth())+1)).slice(-2) + '-' + ('0' + startDate.getDate()).slice(-2);\r\n            const endDateFormating = endDate.getFullYear() + '-' + ('0' + (Number(endDate.getMonth())+1)).slice(-2) + '-' + ('0' + endDate.getDate()).slice(-2);\r\n            setState({\r\n                ...state,\r\n                searchStartDate: startDateFormating,\r\n                searchEndDate: endDateFormating\r\n            });\r\n        } else {\r\n            setState({\r\n                ...state,\r\n                searchStartDate: '',\r\n                searchEndDate: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classNames('searchInput-wrapper', props.className)}>\r\n            {\r\n                props.dynamicSearch ? \r\n                (\r\n                    <Fragment>\r\n                        {props.searchCategory &&\r\n                            state.searchCategoryGroup.map((data, index) => {\r\n                            return (\r\n                                <CustomSelectBox\r\n                                    key={index}\r\n                                    className={index>0 ? 'ml-10' : ''}\r\n                                    categoryList={data}\r\n                                    value={state.selectedCategory[index]}\r\n                                    onChangeHandler={(value) => onChangeHandler(index, value)}\r\n                                />\r\n                            )\r\n                        })}\r\n\r\n                        {props.searchText &&\r\n                        <input \r\n                            className={classNames('searchText', \r\n                                {\r\n                                    'ml-10' : props.searchCategory, \r\n                                    'mr-10' : props.searchBtn\r\n                                }\r\n                            )}\r\n                            type=\"text\"\r\n                            value={state.searchText}\r\n                            placeholder={props.searchPlaceHolder}\r\n                            onChange={(e)=>setState({\r\n                                ...state,\r\n                                searchText: e.target.value\r\n                            })}\r\n                            onKeyPress={(e) => keyPressHandler(e, 'button')}\r\n                        />}\r\n                        {props.searchText2 &&\r\n                        <input \r\n                            className={classNames('searchText', \r\n                                {\r\n                                    'mr-10' : props.searchBtn\r\n                                }\r\n                            )}\r\n                            type=\"text\"\r\n                            value={state.searchText2}\r\n                            placeholder={props.searchPlaceHolder2}\r\n                            onChange={(e)=>setState({\r\n                                ...state,\r\n                                searchText2: e.target.value\r\n                            })}\r\n                            onKeyPress={(e) => keyPressHandler(e, 'button')}\r\n                        />}\r\n\r\n                        {props.searchDate &&\r\n                        <span className=\"searchDate\">\r\n                            <label>검색기간</label>\r\n                            <span>\r\n                                <DatePicker \r\n                                    dateFormat=\"yyyy-MM-dd\"\r\n                                    selected={startDate} \r\n                                    onChange={date => {\r\n                                        setStartDate(date);\r\n                                    }}\r\n                                    className=\"w-100 textField\"\r\n                                />\r\n                            </span>\r\n                            <span className=\"ml-8 mr-8 m-auto\"> ~ </span>\r\n                            <span className=\"mr-10\">\r\n                                <DatePicker \r\n                                    dateFormat=\"yyyy-MM-dd\"\r\n                                    selected={endDate} \r\n                                    onChange={date => {\r\n                                        setEndDate(date);\r\n                                    }}\r\n                                    className=\"w-100 textField\"\r\n                                /> \r\n                            </span>\r\n                        </span>}\r\n\r\n                        {props.searchBtn &&\r\n                        <button \r\n                            className={classNames('searchBtn',\r\n                                {\r\n                                    'ml-10' : !props.searchText\r\n                                }\r\n                            )}\r\n                            onClick={() => onSubmit('button')}\r\n                        >\r\n                            {props.searchBtnTitle}\r\n                        </button>}\r\n                    </Fragment>\r\n                ) :\r\n                (\r\n                    <Fragment>\r\n                        {props.searchCategory &&\r\n                            state.searchCategoryGroup.map((data, index) => {\r\n                            return (\r\n                                <CustomSelectBox\r\n                                    key={index}\r\n                                    className={index>0 ? 'ml-10' : ''}\r\n                                    categoryList={data}\r\n                                    value={state.selectedCategory[index]}\r\n                                    onChangeHandler={(value) => onChangeHandler(index, value)}\r\n                                />\r\n                            )\r\n                        })}\r\n\r\n\r\n                        {props.searchText &&\r\n                        <input \r\n                            className={classNames('searchText', \r\n                                {\r\n                                    'ml-10' : props.searchCategory, \r\n                                    'mr-10' : props.searchBtn\r\n                                }\r\n                            )}\r\n                            type=\"text\"\r\n                            value={state.searchText}\r\n                            placeholder={props.searchPlaceHolder}\r\n                            onChange={(e)=>setState({\r\n                                ...state,\r\n                                searchText: e.target.value\r\n                            })}\r\n                            onKeyPress={keyPressHandler}\r\n                        />}\r\n                    </Fragment>\r\n                )\r\n            }\r\n            { !props.dynamicSearch && props.searchDate &&\r\n                <span className=\"searchDate ml-10\">\r\n                    <label>검색기간</label>\r\n                    <span>\r\n                        <DatePicker \r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            selected={startDate} \r\n                            onChange={date => {\r\n                                setStartDate(date);\r\n                            }}\r\n                            className=\"w-100 textField\"\r\n                        />\r\n                    </span>\r\n                    <span className=\"ml-8 mr-8 m-auto\"> ~ </span>\r\n                    <span className=\"mr-10\">\r\n                        <DatePicker \r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            selected={endDate} \r\n                            onChange={date => {\r\n                                setEndDate(date);\r\n                            }}\r\n                            className=\"w-100 textField\"\r\n                        /> \r\n                    </span>\r\n                </span>\r\n            }\r\n            { !props.dynamicSearch && props.searchBtn &&\r\n                <span style={{display: \"inline-flex\"}}>\r\n                    <button \r\n                        className={classNames('searchBtn',\r\n                            {\r\n                                'ml-10' : !props.searchText\r\n                            }\r\n                        )}\r\n                        onClick={() => onSubmit('button')}\r\n                    >\r\n                        {props.searchBtnTitle}\r\n                    </button>\r\n                </span>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Editor\\TinymceEditor.js",["246","247"],"import React, { useState } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nexport const TinymceEditor = (props) => {\r\n    const {height, value, disabled} = props;\r\n\r\n    const [content, setContent] = useState(props.content);\r\n\r\n    const handleEditorChange = (e) => {\r\n        props.liftValue(e.target.getContent());\r\n    }\r\n    \r\n    return (\r\n        <Editor \r\n            apiKey=\"b4pzl0ukm8ams4m1jopdmovv19d7jsbuaf0wmi54a3ps22ul\"\r\n            init={{\r\n            height: height,\r\n            menubar: false,\r\n            plugins: [\r\n                'advlist autolink lists link image', \r\n                'charmap print preview anchor help',\r\n                'searchreplace visualblocks code',\r\n                'insertdatetime media table paste wordcount'\r\n            ],\r\n            toolbar: 'formatselect | bold italic underline link | bullist numlist',\r\n            content_style: 'body { font-family: NotoSansCJKkr; font-size: 12px; font-weight: normal; font-stretch: normal; font-style: normal; line-height: normal; letter-spacing: normal; color: #444444;'\r\n            }}\r\n            value={value}\r\n            onChange={handleEditorChange}\r\n            disabled={disabled}\r\n        />\r\n        \r\n    )\r\n}\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Checkbox\\CustomCheckbox.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Table\\CustomTable.js",["248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport './CustomTable.scss';\r\nimport { CustomRadioButton } from '../Radio/CustomRadioButton';\r\nimport {CustomCheckbox} from \"../Checkbox/CustomCheckbox\";\r\nimport {CustomPagination} from \"../Pagination/CustomPagination\";\r\n\r\nexport const CustomTable = (props) => {\r\n\r\n    const [contentData, setContentData] = useState([]);\r\n    const [checkedItems, setCheckedItems] = useState([]);\r\n    const [checkedItems2, setCheckedItems2] = useState([]);\r\n    const [rowPerPage, setRowPerPage] = useState(props.rowPerPage);\r\n    const [drawElementsCnt, setDrawElementsCnt] = useState(props.drawElementsCnt);\r\n    const [clickedRowIdx, setClickedRowIdx] = useState(null);\r\n    const [isEditMode, setIsEditMode] = useState(props.isEditMode);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        props.firstCheckedData && setCheckedItems(props.firstCheckedData);\r\n    }, [props.firstCheckedData])\r\n\r\n    // 페이지당 출력되는 행의 수\r\n    useEffect(() => {\r\n        setDrawElementsCnt(props.drawElementsCnt);\r\n    }, [props.drawElementsCnt])\r\n\r\n    // 페이지당 한 화면에 뿌려지는 데이터가 바뀌면 체크 박스를 해제\r\n    useEffect(() => { \r\n        if(checkedItems.length > 0) {\r\n            checkedItems.map(() => {\r\n                const node = document.querySelectorAll(`table tr td input[type=checkbox][id^='row_']`);\r\n                for(let i=0; i<node.length; i++) {\r\n                    node[i].checked = false;\r\n                }\r\n            });\r\n            setCheckedItems([]);\r\n        }\r\n        setContentData(props.contentData);\r\n        \r\n        if(props.checkedList2) {\r\n            const tempList = [];\r\n            props.contentData.map((list, index) => {\r\n                props.columnList.map((columnData, i) => {\r\n\r\n                    const code = columnData.code;\r\n                    switch (code) {\r\n                        case 'authCheck' :\r\n                        case 'searchAuth' :\r\n                        case 'saveAuth' :\r\n                        case 'excelAuth' :\r\n                        case 'deleteAuth' :\r\n                            if(list[code]) {\r\n                                if(!tempList.includes(`${code}_${index}`)) {\r\n                                    tempList.push(`${code}_${index}`);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'authGroupMenu' :\r\n                        case 'authGroupMenu.searchAuth' :\r\n                        case 'authGroupMenu.saveAuth' :\r\n                        case 'authGroupMenu.excelAuth' :\r\n                        case 'authGroupMenu.deleteAuth' :\r\n                            let newCode1;\r\n                            let newCode2;\r\n                            if(code.includes('.')) {\r\n                                newCode1 = code.split('.')[0];\r\n                                newCode2 = code.split('.')[1];\r\n                            } else {\r\n                                newCode1 = code;\r\n                            }\r\n                            if(list[newCode1]) {\r\n                                if(!newCode2) {\r\n                                    if(!tempList.includes(`${code}_${index}`)) {\r\n                                        tempList.push(`${code}_${index}`);\r\n                                    }\r\n                                }\r\n                                if(list[newCode1][newCode2]) {\r\n                                    if(!tempList.includes(`${code}_${index}`)) {\r\n                                        tempList.push(`${code}_${index}`);\r\n                                    }\r\n                                }\r\n                            }\r\n                    \r\n                        default:\r\n                            break;\r\n                    }\r\n                });\r\n            });\r\n            setCheckedItems2(tempList);\r\n        }\r\n\r\n    }, [props.contentData])\r\n\r\n    // 체크되는 항목 부모 컴포넌트로 전달\r\n    useEffect(() => {\r\n        props.checkbox && props.checkedList(checkedItems);\r\n        props.radio && props.checkedList(checkedItems);\r\n    }, [checkedItems]);\r\n\r\n    useEffect(() => {\r\n        props.checkedList2 && props.checkedList2(checkedItems2);\r\n    }, [checkedItems2]);\r\n    \r\n    useEffect(() => {\r\n        setIsEditMode(props.isEditMode);\r\n    }, [props.isEditMode]);\r\n\r\n    // const [contentDataList, setContentDataList] = useState(props.contentData);\r\n    // const [sortColumnNm, setSortColumnNm] = useState(props.columnList[0].code);\r\n    // const [sortOrder, setSortOrder] = useState(false);\r\n    // const result = contentDataList.sort(function(a, b) {\r\n    //     return a[sortColumnNm] < b[sortColumnNm] ? -1 : a[sortColumnNm] > b[sortColumnNm] ? 1 : 0;\r\n    // });\r\n    // console.log(result);\r\n\r\n\r\n    // go to detail\r\n    const onClickHandler = (list, index) => {\r\n        setClickedRowIdx(index);\r\n        props.onClickRow(list);\r\n    }\r\n\r\n    const tdOnClickHandler = (title, list) => {\r\n        props.tdClickEvt(title, list);\r\n    }\r\n\r\n    // Checkbox onChange Event\r\n    const handleCheckbox = (id, checked) => {\r\n        if(checked) {\r\n            setCheckedItems(checkedItems.concat(id));\r\n        } else {\r\n            setCheckedItems(checkedItems.filter(items => items !== id));\r\n        }\r\n    }\r\n\r\n    // Checkbox onChange Event\r\n    const handleCheckbox2 = (id, checked) => {\r\n        if(checked) {\r\n            setCheckedItems2(checkedItems2.concat(id));\r\n        } else {\r\n            setCheckedItems2(checkedItems2.filter(items => items !== id));\r\n        }\r\n    }\r\n\r\n    const radioBtnHandler = (name, value) => {\r\n        setCheckedItems([value]);\r\n    }\r\n\r\n    // Pagination currentPage Number\r\n    const handleOnChgPage = (pageNumber) => {\r\n        props.pagination(pageNumber);\r\n    }\r\n\r\n    const onChangeTextHandler = (e) => {\r\n        const targetArray = e.target.name.split('_');\r\n        const code = targetArray[0];\r\n        const rowIdx = targetArray[1];\r\n        contentData[rowIdx][code] = e.target.value;\r\n        setContentData([\r\n            ...contentData,\r\n        ]);\r\n    }\r\n\r\n    let columnListLen = 0;\r\n    const colgroup = props.columnList.map((columnData, i) => {\r\n        if(!columnData.hidden) {\r\n            columnListLen++;\r\n            return (<col key={i} width={`${columnData.width}%`}/>)\r\n        }\r\n    });\r\n\r\n    const contents = (contentData !== undefined && contentData.length > 0) ? \r\n        (contentData.map((list, index) => {\r\n            const clickEvt = props.rowClickEvt ? { onClick: () => {onClickHandler(list, index)} } : {};\r\n            return (\r\n                <tr \r\n                    key={`${list.code}_${index}`} \r\n                    className={classNames('row', {'clicked': index===clickedRowIdx})}\r\n                    {...clickEvt}\r\n                >\r\n                    {\r\n                        props.checkbox && \r\n                        <td onClick={ e => e.stopPropagation() }>\r\n                            <CustomCheckbox\r\n                                id={`row_${index}`}\r\n                                className=\"j-c-c h-16px\"\r\n                                title=\"\"\r\n                                checked={checkedItems.includes(`row_${index}`)}\r\n                                disabled={isEditMode ? (list.code === '' ? false : true) : false}\r\n                                onChange={handleCheckbox}\r\n                            />\r\n                        </td>\r\n                    }\r\n                    {\r\n                        props.radio &&\r\n                        <td onClick={ e => e.stopPropagation() }>\r\n                            <CustomRadioButton\r\n                                id={`row_${index}`}\r\n                                name=\"rowItems\"\r\n                                className=\"j-c-c h-16px\"\r\n                                title=\"\"\r\n                                value={`row_${index}`}\r\n                                checked={checkedItems[0] === `row_${index}`}\r\n                                customOnChange={radioBtnHandler}\r\n                            />\r\n                        </td>\r\n                    }\r\n                    {\r\n                        props.columnList.map((columnData, i) => {\r\n                            let resultData;\r\n\r\n                            const code = columnData.code;\r\n                            // API 조회 데이터에서 2deps 이상의 데이터를 매핑하기 위해 아래와 같이 함.\r\n                            const tdClickEvt = columnData.tdClickEvent ? { onClick: (e) => { e.stopPropagation(); tdOnClickHandler(columnData.title, list)} } : {};\r\n                            if(code.includes('.')) {\r\n                                let rowData = list;\r\n                                const codeArray = code.split('.');\r\n                                codeArray.map((data, index) => {\r\n                                    if(rowData !== undefined && rowData !== null){\r\n                                        rowData = rowData[data];\r\n                                    } else {\r\n                                        rowData = null;\r\n                                    }\r\n                                });\r\n                                resultData = rowData;\r\n                            }else {\r\n                                resultData = list[code];\r\n                            }\r\n                            switch (code) {\r\n                                case 'no':\r\n                                    return(<td key={i} name={code}>{(props.totalElementsCnt - (props.currentPage * props.rowPerPage)) - index}</td>)\r\n                                case 'usable':\r\n                                    return(<td key={i} name={code}>{(resultData !== undefined ? (resultData ? '사용' : '사용안함') : '')}</td>)\r\n                                \r\n                                case 'enabled':\r\n                                    return(<td key={i} name={code}>{(resultData !== undefined ? (resultData ? '사용' : '사용안함') : '')}</td>)\r\n                               \r\n                                case 'publicYn':\r\n                                    return(<td key={i} name={code}>{(resultData !== undefined ? (resultData ? '사용' : '사용안함') : '')}</td>)\r\n                                \r\n                                case 'attributes':\r\n                                case 'operations':\r\n                                    if(resultData.length > 0) {\r\n                                        const tempArray = [];\r\n                                        resultData.map(data => {\r\n                                            tempArray.push(data.code);\r\n                                        });\r\n                                        return(<td key={i} name={code}>{tempArray.join()}</td>)\r\n                                    }\r\n\r\n                                case 'attribute1':\r\n                                case 'attribute2':\r\n                                case 'attribute3':\r\n                                case 'attribute4':\r\n                                case 'attribute5':\r\n                                    return(<td key={i} name={code}>{(resultData !== undefined ? resultData : '')}</td>)\r\n                                \r\n                                case 'valueType':\r\n                                    return(<td key={i} name={code}>{(resultData === 'ENUMERATION' ? '열거형' : (resultData === 'RANGE' ? '범위형' : ''))}</td>)\r\n\r\n                                case 'availableValues':\r\n                                    const addCommaResult = resultData !== undefined && resultData.map((value, index) => {\r\n                                        if(resultData.length-1 === index) {\r\n                                            return value;\r\n                                        } else {\r\n                                            return value+=', ';\r\n                                        }\r\n                                    });\r\n                                    return(<td key={i} name={code}>{addCommaResult}</td>)\r\n                                \r\n                                case 'authCheck' :\r\n                                case 'searchAuth' :\r\n                                case 'saveAuth' :\r\n                                case 'excelAuth' :\r\n                                case 'deleteAuth' :\r\n                                    return(\r\n                                        <td key={i} name={code}>\r\n                                            <CustomCheckbox\r\n                                                id={`${code}_${index}`}\r\n                                                className=\"j-c-c h-16px\"\r\n                                                title=\"\"\r\n                                                checked={checkedItems2.includes(`${code}_${index}`)}\r\n                                                onChange={handleCheckbox2}\r\n                                                disabled={!isEditMode}\r\n                                            />\r\n                                        </td>\r\n                                    )\r\n                                case 'authGroupMenu.searchAuth' :\r\n                                case 'authGroupMenu.saveAuth' :\r\n                                case 'authGroupMenu.excelAuth' :\r\n                                case 'authGroupMenu.deleteAuth' :\r\n                                    return(\r\n                                        <td key={i} name={code}>\r\n                                            <CustomCheckbox\r\n                                                id={`${code}_${index}`}\r\n                                                className=\"j-c-c h-16px\"\r\n                                                title=\"\"\r\n                                                checked={checkedItems2.includes(`${code}_${index}`)}\r\n                                                onChange={handleCheckbox2}\r\n                                                // disabled={!isEditMode}\r\n                                                disabled={list[`${code}_visible`] ? !isEditMode : true}\r\n                                            />\r\n                                        </td>\r\n                                    )\r\n                                case 'authGroupMenu' :\r\n                                    return(\r\n                                        <td key={i} name={code}>\r\n                                            <CustomCheckbox\r\n                                                id={`${code}_${index}`}\r\n                                                className=\"j-c-c h-16px\"\r\n                                                title=\"\"\r\n                                                checked={checkedItems2.includes(`${code}_${index}`)}\r\n                                                onChange={handleCheckbox2}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </td>\r\n                                    )\r\n                                case 'authGroup' :\r\n                                case 'authGroupName' :\r\n                                    return(\r\n                                        <td\r\n                                            key={i} \r\n                                            name={code} \r\n                                            {...tdClickEvt}\r\n                                        >\r\n                                            {String(resultData)}\r\n                                        </td>\r\n                                    )\r\n                                case 'qnaFinished' :\r\n                                    return(\r\n                                        <td key={i} name={code}>\r\n                                            <CustomCheckbox\r\n                                                id={`${code}_${index}`}\r\n                                                className=\"j-c-c h-16px\"\r\n                                                title=\"\"\r\n                                                checked={contentData[index][code]}\r\n                                                disabled={!isEditMode}\r\n                                            />\r\n                                        </td>\r\n                                    )\r\n                                default:\r\n                                    if(columnData.hidden) {\r\n                                        return(<td key={i} name={code} style={{display: 'none'}}>{String(resultData)}</td>)\r\n                                    } else if( columnData.setInnerHtml ){\r\n                                        return(\r\n                                            <td \r\n                                                key={i} \r\n                                                name={code} \r\n                                                {...tdClickEvt}\r\n                                            ><div dangerouslySetInnerHTML={{__html: String(resultData)}}></div></td>\r\n                                        )\r\n                                                \r\n                                    } else {\r\n                                        return(\r\n                                            <td \r\n                                                key={i} \r\n                                                name={code} \r\n                                                {...tdClickEvt}\r\n                                            >\r\n                                                {\r\n                                                    isEditMode ?\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            name={`${code}_${index}`}\r\n                                                            className=\"w-100\"\r\n                                                            value={contentData[index][code] || \"\"}\r\n                                                            onChange={onChangeTextHandler}\r\n                                                        />\r\n                                                        :\r\n                                                        (columnData.tdClickEvent? \"pop-up\" : ((resultData === null || resultData === undefined) ? '-' : String(resultData)))\r\n                                                }\r\n                                            </td>\r\n                                        )\r\n                                    }\r\n                            }\r\n                        })\r\n                    }\r\n                </tr>\r\n            )\r\n        })) :\r\n        (<tr className=\"row\">\r\n            <td colSpan={(props.checkbox || props.radio) ? (1 + columnListLen) : (columnListLen)}>조회 된 데이터가 없습니다.</td>\r\n        </tr>)\r\n\r\n    /*********** 불필요하다해서 제거함 ***********/ \r\n    // let cnt = 0;\r\n    // const blankTr = (rowPerPage - drawElementsCnt) > 0 && [...Array(rowPerPage - drawElementsCnt)].map(() => {\r\n    //     let tdCnt = 0;\r\n    //     cnt++;\r\n    //     return (\r\n    //         <tr key={`tempRow_${cnt}`}>\r\n    //             {\r\n    //                 props.checkbox && \r\n    //                 <td style={{height: '20px'}}>\r\n    //                     <CustomCheckbox\r\n    //                         id={`tempRow_${cnt}`}\r\n    //                         className=\"j-c-c h-16px\"\r\n    //                         title=\"\"\r\n    //                         checked={false}\r\n    //                         disabled\r\n    //                     />\r\n    //                 </td>\r\n    //             }\r\n    //             {\r\n    //                 [...Array(columnListLen)].map(() => {\r\n    //                     tdCnt++;\r\n    //                     return(<td key={`tempTd_${cnt}_${tdCnt}`} style={{height: '20px'}}></td>)\r\n    //                 })\r\n    //             }\r\n    //         </tr>\r\n    //     )\r\n    // });\r\n    /*********** 불필요하다해서 제거함 ***********/ \r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={props.className ? props.className : \"w-100 h-60vh overflowYscroll\"}>\r\n                <table className=\"mainTable\">\r\n                    <colgroup>\r\n                        { (props.checkbox || props.radio) && <col width=\"2%\"/> }\r\n                        {colgroup}\r\n                    </colgroup>\r\n                    <thead className=\"bgC-c5c5c5\">\r\n                        <tr>\r\n                            { (props.checkbox || props.radio) && <th className=\"tableHead fixedHeader t-0px\"></th> }\r\n                            { props.columnList.map(list => {\r\n                                if(!list.hidden) {\r\n                                    return (\r\n                                        <th key={list.title} className=\"v-middle tableHead fixedHeader t-0px\">\r\n                                            {props.sort ? \r\n                                                <button \r\n                                                    className={classNames('sortBtn', \r\n                                                        // {\r\n                                                        //     'ascending' : sortOrder,\r\n                                                        //     'descending' : !sortOrder\r\n                                                        // }\r\n                                                    )}\r\n                                                >\r\n                                                    {list.title}\r\n                                                </button> :\r\n                                                <span className=\"h-24px\">{list.title}</span>\r\n                                            }\r\n                                        </th>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"tableBody\">\r\n                        { contents }\r\n                        {/* { contentData !== undefined && contentData.length > 0 && blankTr } */}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            {\r\n                props.paging && \r\n                <div className=\"pagination-wrappper\">\r\n                    {\r\n                        contentData !== undefined && contentData.length > 0 &&\r\n                        <CustomPagination\r\n                            activePage={props.currentPage}\r\n                            itemsCountPerPage={props.rowPerPage}\r\n                            totalItemsCount={props.totalElementsCnt}\r\n                            pageRange={5}\r\n                            onChange={handleOnChgPage}\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\TextField\\CustomTextField.js",["264"],"import React, { Fragment } from 'react'\r\nimport classNames from 'classnames';\r\nimport './CustomTextField.scss';\r\n\r\nexport const CustomTextField = (props) => {\r\n\r\n    const { type, className, title, name, required, disabled, readOnly, validLen, validRegExp, placeholder, value, customOnChange, customOnClick, customOnKeyPress } = props;\r\n\r\n    const onClickHandler = (e) => {\r\n        props.customOnClick(name);\r\n    }\r\n\r\n    const onChangeHandler = (e) => {\r\n        if(validRegExp !== undefined) {\r\n            if(validRegExp.test(e.target.value)) {\r\n                e.target.value = e.target.value.replace(validRegExp, '')\r\n            }\r\n            props.customOnChange(name, e.target.value);\r\n        } else {\r\n            props.customOnChange(name, e.target.value);\r\n        }\r\n    }\r\n    \r\n    const onKeyPressHandler = (e) => {\r\n        customOnKeyPress(e);\r\n    }\r\n\r\n    // 최대 글자 수 제한\r\n    const maxLen = validLen ? {maxLength: validLen} : {};\r\n\r\n    // readOnly 속성 부여\r\n    const readOnlyVal = readOnly ? {readOnly: true} : {};\r\n\r\n    // ClickEvent or ChangeEvent 적용(둘중 하나만 써야함.)\r\n    const onClickEvt = customOnClick ? {onClick: onClickHandler} : {};\r\n    const onChangeEvt = customOnChange ? {onChange: onChangeHandler} : {};\r\n    const onKeyPressEvt = customOnKeyPress ? {onKeyPress: onKeyPressHandler} : {};\r\n\r\n    let resultData;\r\n    if(typeof(name) === 'string' && name.includes('.')) {\r\n        let rowData = value;\r\n        const nameArray = name.split('.');\r\n        nameArray.map((data, index) => {\r\n            rowData = rowData[data] ? rowData[data] : '';\r\n        });\r\n        resultData = rowData;\r\n    }else {\r\n        resultData = value[name] ? value[name] : '';\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {title !== undefined && \r\n            <label className=\"label_title\">{title} {required && '*'}</label>}\r\n            <input \r\n                className={classNames('textField', className, {'textField_disabled' : disabled})}\r\n                type={type ? type : \"text\" }\r\n                name={name}\r\n                placeholder={placeholder}\r\n                disabled={disabled}\r\n                {...onClickEvt}\r\n                {...onChangeEvt}\r\n                {...onKeyPressEvt}\r\n                {...maxLen}\r\n                {...readOnlyVal}\r\n                value={resultData}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\SelectBox\\CustomSelectBox.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\atoms\\Pagination\\CustomPagination.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\index.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\NoticeList.js",["265","266","267","268","269","270","271","272","273"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport store from '../../../../stores/store';\r\nimport Net from '../../../../actions/net';\r\nimport {SearchInputBar} from \"../../../../UI/atoms/SearchInputBar/SearchInputBar\";\r\nimport {CustomTable} from \"../../../../UI/atoms/Table/CustomTable\";\r\n\r\nconst columnList = [\r\n    {\r\n        code: 'noticeId',\r\n        title: 'noticeId',\r\n        width: '8',\r\n        hidden: true,\r\n    },\r\n    {\r\n        code: 'classificationKOR',\r\n        title: '구분',\r\n        width: '8',\r\n    },\r\n    {\r\n        code: 'title',\r\n        title: '제목',\r\n        width: '20',\r\n    },\r\n    {\r\n        code: 'viewDate',\r\n        title: '공개기간',\r\n        width: '18',\r\n    },\r\n    {\r\n        code: 'mainNotice',\r\n        title: '중요공지',\r\n        width: '5',\r\n    },\r\n    {\r\n        code: 'dongHo',\r\n        title: '장소',\r\n        width: '8',\r\n    },\r\n    {\r\n        code: 'site.name',\r\n        title: '현장명',\r\n        width: '10',\r\n    },\r\n    {\r\n        code: 'customer.name',\r\n        title: '고객사',\r\n        width: '8',\r\n    },\r\n    {\r\n        code: 'publicYn',\r\n        title: '사용여부',\r\n        width: '5',\r\n    },\r\n];\r\n\r\nexport const NoticeList = (props) => {\r\n    // useHistory 선언\r\n    const history = useHistory();\r\n\r\n    const [programAuth, setProgramAuth] = useState({});\r\n    const [contentData, setContentData] = useState([]);\r\n    const [checkedList, setCheckedList] = useState([]);\r\n    const [noticeDetail, setNoticeDetail] = useState([]);\r\n\r\n    const [searchCategory, setSearchCategory] = useState([\r\n        [\r\n            [\r\n                {code: '', name: '고객사 선택'}\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                {code: '', name: '현장명 선택'}\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                {code: '', name: '구분 선택'}\r\n            ]\r\n        ],\r\n    ]);\r\n\r\n    const [pageState, setPageState] = useState({\r\n        currentPage: 0,\r\n        rowPerPage: 13,\r\n        totalElementsCnt: 0,\r\n        drawElementsCnt: 0,\r\n        searchText: '',\r\n        searchCategory1: '',\r\n        searchCategory2: '',\r\n        searchCategory3: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        store.openedPage = '공지사항 목록';\r\n        getCategoryList('');\r\n        pageAuthInfo();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getClassificationList(response => {\r\n            loadData(response.data)\r\n\r\n        });\r\n    }, [pageState.currentPage,\r\n        pageState.searchCategory1,\r\n        pageState.searchCategory2,\r\n        pageState.searchCategory3,\r\n    ]);\r\n\r\n    const pageAuthInfo = () => {\r\n        const authGroupCode = props.userInfo.authList[0];\r\n        const menuId = sessionStorage.getItem('menuId');\r\n\r\n        Net.getAuthGroupMenuList(menuId, (response) => {\r\n            if(response.status === 200) {\r\n                response.data.map(item => {\r\n                    if(item.authGroup === authGroupCode && item.authGroupMenu) {\r\n                        setProgramAuth({\r\n                            searchAuth: Boolean(item.authGroupMenu.searchAuth),\r\n                            saveAuth: Boolean(item.authGroupMenu.saveAuth),\r\n                            excelAuth: Boolean(item.authGroupMenu.excelAuth),\r\n                            deleteAuth: Boolean(item.authGroupMenu.deleteAuth),\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    } \r\n\r\n    const loadData = (codeList) => {\r\n        Net.getNoticeList(\r\n            {   \r\n                currentPage: pageState.currentPage,\r\n                rowPerPage: pageState.rowPerPage, \r\n                searchText: pageState.searchText, \r\n                searchCategory1: pageState.searchCategory1, \r\n                searchCategory2: pageState.searchCategory2,\r\n                searchCategory3: pageState.searchCategory3\r\n            }, (response) => {\r\n            if(response.status === 200) {\r\n                let dongHo;\r\n                response.data.content.map((item, i) => {\r\n                    if( item.dong !== \"ALL\" ){\r\n\r\n                        dongHo = item.dong + \"동 \";\r\n                    } else if( item.ho !== \"ALL\" ){\r\n                        dongHo += item.ho + \"호\";\r\n                    } else {\r\n                        dongHo = \"\";\r\n                    }\r\n                    item.dongHo = dongHo;\r\n\r\n                    if( item.mainNotice ){\r\n\r\n                        item.mainNotice = \"중요\";\r\n                    } else {\r\n                        item.mainNotice = \"일반\";\r\n                    }\r\n                    if( item.publicYn ){\r\n\r\n                        item.publicYn = \"사용\";\r\n                    } else {\r\n                        item.publicYn = \"사용안함\";\r\n                    }\r\n                    item.viewDate = item.startDate + \" ~ \" + item.endDate;\r\n\r\n                    codeList.map(cItem => {\r\n\r\n                        if( item.classification === cItem.code ){\r\n                            item.classificationKOR = cItem.name;\r\n                        }\r\n                    })\r\n\r\n                })\r\n                setContentData(response.data.content);\r\n            }\r\n            });\r\n    }\r\n\r\n    const getClassificationList = (callback) => {\r\n\r\n        Net.getCommunityCode(\r\n            \"NOTICE_CLASSIFICATION\", (response) => {\r\n\r\n                if(response.status === 200) {\r\n                    let newArray = [{code:'',name:\"구분 선택\"}];\r\n                    response.data.map(items => {\r\n                        if( items.usable ){\r\n                            newArray = [\r\n                                ...newArray,\r\n                                {\r\n                                    code: items.code,\r\n                                    name: items.name\r\n                                }\r\n                            ]\r\n                        }                        \r\n                    })\r\n                    callback({status: 200, data: newArray});\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const getCategoryList = () => {\r\n        let response3 = [];\r\n        getClassificationList(response => {\r\n            if(response.status === 200) {\r\n                response3 = response.data;\r\n                getCustomerList((response1) => {\r\n                    getSitesList(null, (response2) => {\r\n                        setSearchCategory([response1, response2, response3]);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const getRelateCategory = (selectedCategory) => {\r\n        if(selectedCategory === \"reset\") selectedCategory = \"\";  \r\n        getSitesList(selectedCategory, (response2) => {\r\n            setSearchCategory([\r\n                searchCategory[0],\r\n                response2,\r\n                searchCategory[2]\r\n            ]);\r\n        });\r\n    }\r\n\r\n    const getCustomerList = (callback) => {\r\n        Net.getCustomerList(\r\n            {currentPage: '', rowPerPage: '', searchText: ''}, (response) => {\r\n            if(response.status === 200) {\r\n                let newArray = searchCategory[0][0];\r\n                response.data.content.map(items => {\r\n                    newArray = [\r\n                        ...newArray,\r\n                        {\r\n                            code: items.code,\r\n                            name: items.name\r\n                        }\r\n                    ]\r\n                });\r\n                callback(newArray);\r\n            } \r\n        });\r\n    }\r\n\r\n    const getSitesList = (selectedCategory, callback) => {\r\n        if(selectedCategory){\r\n            Net.getSitesList(\r\n                {currentPage: '', rowPerPage: '', searchText: '', customerCode: selectedCategory?selectedCategory:false}, (response) => {\r\n                 if(response.status === 200) {\r\n                     let newArray =  [{code:'',name:\"현장명 선택\"}];\r\n                     if(response.data.content.length > 0) {\r\n                         response.data.content.map(items => {\r\n                             newArray = [\r\n                                 ...newArray,\r\n                                 {\r\n                                     code: items.code,\r\n                                     name: items.name\r\n                                 }\r\n                             ]\r\n                             \r\n                         })\r\n                     } \r\n                    callback(newArray);\r\n                 } else {\r\n                     let newArray = [{code:'',name:\"현장명 선택\"}];\r\n                     callback(newArray);\r\n                 }\r\n            });\r\n        } else {\r\n            let newArray = [{code:'',name:\"현장명 선택\"}];\r\n            callback(newArray);\r\n        }\r\n    }\r\n\r\n    const onClickRow = (e) => {\r\n        Net.getNoticeOne(e.noticeId, (response) => {\r\n            if(response.status === 200) {\r\n                setNoticeDetail(response.data);\r\n            }\r\n        });\r\n    }\r\n\r\n    const onMovePage = (e) => {\r\n        setPageState({\r\n            ...pageState,\r\n            currentPage: e-1\r\n        });\r\n    }\r\n\r\n    const removeList = () => {\r\n        const result = window.confirm('삭제하시겠습니까?');\r\n        const removeList = [];\r\n        checkedList.map((id) => {\r\n            const node = document.querySelector(`#${id}`);\r\n            const nodeTr = node.closest('tr');\r\n            const noticeId = nodeTr.querySelector('td[name=noticeId]').textContent;\r\n            removeList.push({noticeId: noticeId});\r\n        });\r\n        if(result) {\r\n            Net.removeNotice(removeList, (response) => {\r\n                if(response) {\r\n                    getClassificationList((response) => loadData(response.data));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = (e) => {\r\n        setPageState({\r\n            ...pageState,\r\n            searchCategory1: e.selectedCategory[0],\r\n            searchCategory2: e.selectedCategory[1],\r\n            searchCategory3: e.selectedCategory[2],\r\n        });\r\n    }\r\n\r\n    const addList = () => {\r\n        history.push('/community/notice/regist');\r\n    }\r\n\r\n    const goModifypage = () => {\r\n        history.push(`/community/notice/regist/${noticeDetail.noticeId}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100 h-100\">\r\n            <div className=\"w-100 h-7 display_table\">\r\n                <SearchInputBar\r\n                    className=\"w-100\"\r\n                    searchCategory={true}\r\n                    searchCategoryGroup={searchCategory}\r\n                    searchBtn={true}\r\n                    searchBtnTitle=\"검색\"\r\n                    dynamicSearch={false}\r\n                    relateCategoryHandler={getRelateCategory}\r\n                    onSubmit={onSubmitHandler}\r\n                />\r\n                {\r\n                    programAuth.saveAuth &&\r\n                    <div className=\"display_table_cell v-middle\">\r\n                        <button \r\n                            className=\"addBtn w-90px h-30px floatR mr-20\"\r\n                            onClick={addList}\r\n                        >등록</button>\r\n                    </div>\r\n\r\n                }\r\n                \r\n            </div>\r\n            <div className=\"w-100 h-1px bgC-efefef\" />\r\n            <div className=\"flex h-93\">\r\n                <div className=\"w-70 h-100\">\r\n                    <p className=\"totalCnt\">Total {pageState.totalElementsCnt}</p>\r\n                    {\r\n                        programAuth.deleteAuth && checkedList.length > 0 && \r\n                        <button \r\n                            className=\"removeBtn w-90px h-30px floatR mt-7 mr-15\"\r\n                            onClick={removeList}\r\n                        >삭제</button>\r\n                    }\r\n                    <CustomTable\r\n                        columnList = {columnList}\r\n                        contentData = {contentData}\r\n                        paging = {true}\r\n                        checkbox = {true}\r\n                        checkedList = {(checkedList) => {setCheckedList(checkedList)} }\r\n                        totalElementsCnt = {pageState.totalElementsCnt}\r\n                        rowPerPage = {pageState.rowPerPage}\r\n                        currentPage = {pageState.currentPage}\r\n                        drawElementsCnt = {pageState.drawElementsCnt}\r\n                        pagination = {onMovePage}\r\n                        rowClickEvt = {true}\r\n                        onClickRow = {onClickRow}\r\n                        // sort = {true}\r\n                    />\r\n                </div>\r\n                <div className=\"w-30 h-100\">\r\n                    <div className=\"flex\">\r\n                        <p className=\"body_content_subtitle\">내용</p>\r\n                        {\r\n                            noticeDetail.contents ?\r\n                            (\r\n                                <button \r\n                                className=\"defaultBtn bgC-eb878c borderC-eb878c w-90px h-30px mr-20 mt-auto mb-auto ml-auto\"\r\n                                onClick={goModifypage}\r\n                                >수정</button>\r\n                            ) : \"\"\r\n                        }\r\n                        \r\n                    </div>\r\n                    <div className=\"w-100 h-100\">\r\n                        <table className=\"mainTable\">\r\n                            <thead className=\"tableHead\">\r\n                                <tr>\r\n                                    <th>내용</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tableBody\">\r\n                                {\r\n                                    noticeDetail.contents ?\r\n                                    (\r\n                                        <Fragment>\r\n                                            <tr>\r\n                                                <td style={{padding:\"10px\", overflow:\"unset\", whiteSpace:\"initial\"}}>\r\n                                                    <div className=\"overFlowYscrollView h-60vh\">\r\n                                                        <div dangerouslySetInnerHTML={{__html: noticeDetail.contents}}></div>\r\n                                                        {   \r\n                                                            noticeDetail.imageDataUrl &&\r\n                                                            <div className=\"mt-10\">             \r\n                                                                <img src={noticeDetail.imageDataUrl} alt=\"complex=Img\" width=\"300px\"/>                                                           \r\n                                                            </div>\r\n                                                        }\r\n                                                    </div>\r\n                                                </td>\r\n                                            </tr>\r\n                                            \r\n                                            \r\n                                        </Fragment>\r\n                                        \r\n                                        \r\n                                    ) : ( \r\n                                        <tr className=\"row\"><td>조회 된 데이터가 없습니다.</td></tr>\r\n                                    )\r\n                                }\r\n                                \r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Notice\\NoticeRegist.js",["274","275","276","277","278","279","280","281","282","283"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, withRouter } from 'react-router-dom';\r\nimport { CustomTextField, CustomRadioButton, CustomSelectBox, ImgUpload, TinymceEditor } from '../../../../UI/atoms';\r\nimport store from '../../../../stores/store';\r\nimport DatePicker from \"react-datepicker\";\r\nimport Net from '../../../../actions/net';\r\n\r\nconst NoticeRegist = ({match}) => {\r\n\r\n    const [form, setForm] = useState({\r\n        noticeId: '',\r\n        classification: '',\r\n        mainNotice: false,\r\n        title: '',\r\n        contents: '',\r\n        customer: {\r\n            code:'',\r\n            name:'',\r\n        },\r\n        site: {\r\n            code:'',\r\n            name:'',\r\n        },\r\n        dong: '',\r\n        ho: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        publicYn: true,\r\n        image: '',\r\n        imageDataUrl: '',\r\n    });\r\n\r\n    const [registPage, setRegistPage] = useState(true);\r\n    const [duplicateChk, setDuplicateChk] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [oriTextValue, setOriTextValue] = useState(\"\");\r\n    const [customerList, setCustomerList] = useState([{\r\n        code: '',\r\n        name: '고객사명 선택'\r\n    }]);\r\n    const [siteList, setSiteList] = useState([{\r\n        code: '',\r\n        name: '현장명 선택'\r\n    }]);\r\n    const [classificationList, setClassificationList] = useState([\r\n        [\r\n            {code: '', name: '구분 선택'}\r\n        ]\r\n    ]);\r\n    const [modalState, setModalState] = useState({\r\n        open: false,\r\n        data: [],\r\n        clickedBtnName: ''\r\n    });\r\n    const [image, setImage] = useState(\"\");\r\n    const [textEditorVal, setTextEditorVal] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        store.openedPage = '공지사항 등록/수정';\r\n\r\n        // 상세 조회(수정 목적으로 진입시)\r\n        if(match.params.noticeId !== undefined) {\r\n            getNoticeOne(match.params, (response) => {\r\n                if(response.status === 200) {\r\n                    if(!response.data.customer){\r\n                        response.data.customer = {code: \"\", name: \"\"};\r\n                    }\r\n                    if(!response.data.site){\r\n                        response.data.site = {code: \"\", name: \"\"};\r\n                    }\r\n                    if(response.data.dong === \"ALL\"){\r\n                        response.data.dong = \"\";\r\n                    }\r\n                    if(response.data.ho === \"ALL\"){\r\n                        response.data.ho = \"\";\r\n                    }  \r\n                    setForm({\r\n                        ...form,\r\n                        ...response.data,\r\n                    });\r\n                    setOriTextValue(response.data.contents);\r\n\r\n                    // 등록페이지 여부 확인\r\n                    setRegistPage(false);\r\n                    \r\n                    setStartDate(new Date(response.data.startDate));\r\n                    setEndDate(new Date(response.data.endDate));\r\n                    \r\n                }\r\n            });\r\n        }\r\n\r\n        // 고객사 전체 목록\r\n        getCustomerList((response) => {\r\n            setCustomerList(response);\r\n        });\r\n        getClassificationList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dateChangeHandler();    \r\n    }, [ startDate, endDate ])\r\n\r\n    useEffect(() => {\r\n        if(form.customer.code !== '') {\r\n            getSiteList(form.customer.code, (response) => {\r\n                setSiteList(response);\r\n            })\r\n        } else {\r\n            // 빈값 선택시 장비모델명 selectbox 초기화\r\n            setSiteList([\r\n                {\r\n                    code: '',\r\n                    name: '현장명 선택'\r\n                }\r\n            ])\r\n        }\r\n    }, [form.customer.code]);\r\n\r\n    const getCustomerList = (callback) => {\r\n        Net.getCustomerList(\r\n            {currentPage: '', rowPerPage: '', searchText: ''}, (response) => {\r\n            if(response.status === 200) {\r\n                let newArray = customerList;\r\n                response.data.content.map(items => {\r\n                    newArray = [\r\n                        ...newArray,\r\n                        {\r\n                            code: items.code,\r\n                            name: items.name\r\n                        }\r\n                    ]\r\n                });\r\n                callback(newArray);\r\n            } \r\n        });\r\n    }\r\n                 \r\n    const getSiteList = (code, callback) => {\r\n        Net.getSitesList(\r\n            {\r\n                currentPage: '', \r\n                rowPerPage: '', \r\n                searchText: '',\r\n                customerCode: code,\r\n            }, (response) => {\r\n            if(response.status === 200) {\r\n                let newArray = [\r\n                    {\r\n                        code: '',\r\n                        name: '현장명 선택'\r\n                    }\r\n                ];\r\n                response.data.content.map(items => {\r\n                    newArray = [\r\n                        ...newArray,\r\n                        {\r\n                            code: items.code,\r\n                            name: items.name\r\n                        }\r\n                    ]\r\n                });\r\n                callback(newArray);\r\n            } else if(response.status === 204) {\r\n                let newArray = [\r\n                    {\r\n                        code: '',\r\n                        name: '현장명 선택'\r\n                    }\r\n                ];\r\n                callback(newArray);\r\n            }\r\n        });\r\n    }\r\n\r\n    const getClassificationList = () => {\r\n        Net.getCommunityCode(\r\n            \"NOTICE_CLASSIFICATION\", (response) => {\r\n                if(response.status === 200) {\r\n                    let newArray = classificationList[0];\r\n\r\n                    response.data.map(items => {\r\n                        if( items.usable ){\r\n                            newArray = [\r\n                                ...newArray,\r\n                                {\r\n                                    code: items.code,\r\n                                    name: items.name\r\n                                }\r\n                            ]\r\n                        }                        \r\n                    })\r\n                    setClassificationList(newArray);\r\n                }\r\n            }\r\n        )\r\n        \r\n    }\r\n\r\n    const history = useHistory();\r\n\r\n    const getNoticeOne = (params, callback) => {\r\n        Net.getNoticeOne(params.noticeId, (response) => {\r\n            callback(response);\r\n        });\r\n    }\r\n\r\n    const textFieldHandler = (name, value) => {\r\n        if(name === 'code') setDuplicateChk(false);\r\n        const nextForm = {\r\n            ...form,\r\n            [name]: value\r\n        }\r\n        setForm(nextForm);\r\n    }\r\n\r\n    const radioBtnHandler = (name, value) => {\r\n        let nextForm;\r\n        if(name === \"authGroup\"){\r\n            nextForm = {\r\n                ...form,\r\n                [name]: value,\r\n            }\r\n        } else {\r\n            nextForm = {\r\n                ...form,\r\n                [name]: value === 'true' ? true : false,\r\n            }\r\n        }\r\n        \r\n        setForm(nextForm);\r\n    }\r\n\r\n    const selectBoxHandler = (name, value) => {\r\n        switch (name) {\r\n            case 'customer.code':\r\n                setForm({\r\n                    ...form,\r\n                    customer: {\r\n                        code: value.code,\r\n                        name: value.name\r\n                    },\r\n                    site: {\r\n                        code: \"\",\r\n                        name: \"\"\r\n                    }\r\n                });\r\n                break;\r\n            case 'site.code':\r\n                setForm({\r\n                    ...form,\r\n                    site: {\r\n                        code: value.code,\r\n                        name: value.name\r\n                    }\r\n                });\r\n                break;\r\n            case 'classification':\r\n                setForm({\r\n                    ...form,\r\n                    classification: value\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const onSubmitHandler = () => {\r\n\r\n        if( !form.classification ) {\r\n            alert('구분을 선택해 주세요.');\r\n            document.getElementsByName('classification')[0].focus();\r\n            return false;\r\n        }\r\n        if( !form.title ) {\r\n            alert('제목을 입력해 주세요.');\r\n            document.getElementsByName('title')[0].focus();\r\n            return false;\r\n        }\r\n        if( !form.contents ) {\r\n            alert('내용을 입력해 주세요.');\r\n            return false;\r\n        }\r\n        if( !form.customer.code ) {\r\n            alert('고객사를 선택해 주세요.');\r\n            document.getElementsByName('customer.code')[0].focus();\r\n            return false;\r\n        }\r\n        if(form.classification !== 'INCIDENT' && !form.site.code ) {\r\n            alert('현장명을 선택해 주세요.');\r\n            document.getElementsByName('site.code')[0].focus();\r\n            return false;\r\n        }\r\n\r\n        var result = window.confirm('저장하시겠습니까?');\r\n        if(result) {\r\n            if(registPage) {\r\n                Net.addNotice(form, (response) => {\r\n                    console.log(response.status)\r\n                    if(response.status === 200 || response.status === 201) {\r\n                        history.push('/community/notice/list');\r\n                    }\r\n                });\r\n            } else {\r\n                Net.updateNotice(form, (response) => {\r\n                    if(response.status === 200) {\r\n                        history.push('/community/notice/list');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        history.push('/community/notice/list');\r\n    }\r\n\r\n    const sendData = (e) => {\r\n        setModalState({\r\n            ...modalState,\r\n            data: e,\r\n        })\r\n    }\r\n    \r\n    const getImgFile = (dataUrl) => {\r\n        setForm({\r\n            ...form,\r\n            imageDataUrl: dataUrl,\r\n        });\r\n    }\r\n\r\n    const liftValue = (value) => {\r\n        setTextEditorVal(value);\r\n        setForm({\r\n            ...form,\r\n            contents: value,\r\n        });\r\n    }\r\n\r\n    const dateChangeHandler = () => {\r\n\r\n        const startDateFormating = startDate.getFullYear() + '-' + ('0' + (Number(startDate.getMonth())+1)).slice(-2) + '-' + ('0' + startDate.getDate()).slice(-2);\r\n        const endDateFormating = endDate.getFullYear() + '-' + ('0' + (Number(endDate.getMonth())+1)).slice(-2) + '-' + ('0' + endDate.getDate()).slice(-2);\r\n        setForm({\r\n            ...form,\r\n            startDate: startDateFormating,\r\n            endDate: endDateFormating\r\n        });\r\n    }\r\n\r\n    const onRemoveHandler = () => {\r\n        const result = window.confirm('삭제하시겠습니까?');\r\n        if(result) {\r\n            Net.removeNotice([{noticeId: form.noticeId}], (response) => {\r\n                if(response) {\r\n                    history.push('/community/notice/list');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100 h-100\">\r\n            <div className=\"w-100 h-7 display_table\"></div>\r\n            <div className=\"w-100 h-1px bgC-efefef\" />\r\n            <div className=\"h-93\">\r\n                <div className=\"flex h-90\">\r\n                    <div className=\"w-60 h-100\">\r\n                        <div className=\"ml-55 mt-12\">\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <label className=\"label_title\">구분 (*)</label>\r\n                                <CustomSelectBox\r\n                                    name=\"classification\"\r\n                                    categoryList={classificationList}\r\n                                    value={form.classification}\r\n                                    onChangeHandler={(value) => selectBoxHandler('classification', value)}\r\n                                    callbackCodeName=\"N\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex w-90 mb-8\">\r\n                                <label className=\"label_title\">중요 공지 *</label>\r\n                                <CustomRadioButton\r\n                                    className=\"mr-60\"\r\n                                    title=\"중요\"\r\n                                    id=\"mainNoticeY\"\r\n                                    name=\"mainNotice\"\r\n                                    value={true}\r\n                                    checked={form.mainNotice}\r\n                                    customOnChange={radioBtnHandler}\r\n                                />\r\n                                <CustomRadioButton \r\n                                    title=\"일반\"\r\n                                    id=\"mainNoticeN\"\r\n                                    name=\"mainNotice\"\r\n                                    value={false}\r\n                                    checked={!form.mainNotice}\r\n                                    customOnChange={radioBtnHandler}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <CustomTextField \r\n                                    className=\"w-65 h-26px\"\r\n                                    title=\"제목\"\r\n                                    name=\"title\"\r\n                                    required={true}\r\n                                    disabled={false}\r\n                                    placeholder=\"\"\r\n                                    customOnChange={textFieldHandler}\r\n                                    value={form}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <label className=\"label_title\">내용 *</label>\r\n                                <TinymceEditor\r\n                                    liftValue={liftValue}\r\n                                    value={oriTextValue}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <label className=\"label_title\">고객사 *</label>\r\n                                <CustomSelectBox\r\n                                    name=\"customer.code\"\r\n                                    categoryList={customerList}\r\n                                    value={form.customer.code}\r\n                                    onChangeHandler={(value, name) => selectBoxHandler('customer.code', {code: value, name: name})}\r\n                                    callbackCodeName=\"Y\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <label className=\"label_title\">현장 *</label>\r\n                                <CustomSelectBox\r\n                                    name=\"site.code\"\r\n                                    categoryList={siteList}\r\n                                    value={form.site.code}\r\n                                    onChangeHandler={(value, name) => selectBoxHandler('site.code', {code: value, name: name})}\r\n                                    callbackCodeName=\"Y\"\r\n                                />\r\n                                <div className=\"label_summary ml-10\">※ 구분이 `장애`이면 현장은 필수가 아님</div>\r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <div className=\"flex w-50 h-26px\">\r\n                                    <CustomTextField \r\n                                        className=\"w-40\"\r\n                                        title=\"장소(동)\"\r\n                                        name=\"dong\"\r\n                                        required={false}\r\n                                        disabled={false}\r\n                                        validLen=\"15\"\r\n                                        //validRegExp={/[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi}\r\n                                        placeholder=\"\"\r\n                                        customOnChange={textFieldHandler}\r\n                                        value={form}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"flex w-50 h-26px\">\r\n                                    <CustomTextField \r\n                                        className=\"w-40\"\r\n                                        title=\"장소(호)\"\r\n                                        name=\"ho\"\r\n                                        required={false}\r\n                                        disabled={false}\r\n                                        validLen=\"15\"\r\n                                        //validRegExp={/[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi}\r\n                                        placeholder=\"\"\r\n                                        customOnChange={textFieldHandler}\r\n                                        value={form}\r\n                                    />\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className=\"flex mb-12 w-90\">\r\n                                <label className=\"label_title\">공개기간 *</label>\r\n                                <div className=\"w-20 mr-10\">\r\n                                    <DatePicker \r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                        selected={startDate} \r\n                                        onChange={date => {\r\n                                            setStartDate(date);\r\n                                        }}\r\n                                        className=\"w-100 textField\"\r\n                                    /> \r\n                                </div>\r\n                                ~\r\n                                <div className=\"w-20 ml-10\">\r\n                                    <DatePicker \r\n                                        dateFormat=\"yyyy-MM-dd\"\r\n                                        selected={endDate} \r\n                                        onChange={date => {\r\n                                            setEndDate(date);\r\n                                        }}\r\n                                        className=\"w-100 textField\"\r\n                                    /> \r\n                                </div>                             \r\n                            </div>\r\n                            <div className=\"flex w-90\">\r\n                                <label className=\"label_title\">사용유무</label>\r\n                                <CustomRadioButton\r\n                                    className=\"mr-60\"\r\n                                    title=\"사용\"\r\n                                    id=\"radioBtn1\"\r\n                                    name=\"publicYn\"\r\n                                    value={true}\r\n                                    checked={form.publicYn}\r\n                                    customOnChange={radioBtnHandler}\r\n                                />\r\n                                <CustomRadioButton \r\n                                    title=\"사용안함\"\r\n                                    id=\"radioBtn2\"\r\n                                    name=\"publicYn\"\r\n                                    value={false}\r\n                                    checked={!form.publicYn}\r\n                                    customOnChange={radioBtnHandler}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"w-40 h-100\">\r\n                        <div className=\"w-100 h-100 mt-12\" style={{display:\"block\"}} >\r\n                            <div className=\"floatC mr-2p\" >\r\n                                <ImgUpload \r\n                                    title={\"사진\"}\r\n                                    imgUpload={getImgFile}\r\n                                    imgSize={\"300px\"}\r\n                                    imgFile={form.imageDataUrl}\r\n                                />\r\n                            </div>\r\n                            \r\n                        </div>                      \r\n                    </div>\r\n                </div>\r\n                <div className=\"footer_btn h-10\">\r\n                    <div className=\"\">\r\n                        <button className=\"w-160px h-30px addBtn mr-10\" onClick={onSubmitHandler}>저장</button>\r\n                        { registPage ? \"\" : <button className=\"w-160px h-30px removeBtn mr-10\" onClick={onRemoveHandler}>삭제</button>}\r\n                        <button className=\"w-160px h-30px cancelBtn\" onClick={onCancelHandler}>취소</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(NoticeRegist);\r\n","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Community\\Community.js",[],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Test\\Test.js",["284","285"],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\components\\pages\\Test\\NomalComponent.js",["286"],"import React, { memo, useEffect } from \"react\";\r\n\r\nfunction NomalComponent ({ name }){\r\n    useEffect(()=> {\r\n       console.log(\"하위 컴포넌트 렌더링\");\r\n    });\r\n    return <div> { name }</div>\r\n\r\n}\r\n\r\nexport default NomalComponent;",["287","288"],"C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\organisms\\Table.js",["289","290","291","292","293"],"import React, {useEffect, useMemo, useState} from 'react';\r\nimport TableGrid from \"../molecules/Table/TableGrid\";\r\nimport Net from '../../actions/net';\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nconst columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 90, hide: true },\r\n    { field: \"firstName\", headerName: \"First name\", width: 150 },\r\n    { field: \"lastName\", headerName: \"Last name\", width: 150 },\r\n    {\r\n        field: \"age\",\r\n        headerName: \"Age\",\r\n        type: \"number\",\r\n        width: 110\r\n    },\r\n    {\r\n        field: \"fullName\",\r\n        headerName: \"Full name\",\r\n        description: \"This column has a value getter and is not sortable.\",\r\n        sortable: false,\r\n        width: 160,\r\n        valueGetter: (params) =>\r\n            `${params.getValue(params.id, \"firstName\") || \"\"} ${\r\n                params.getValue(params.id, \"lastName\") || \"\"\r\n            }`\r\n    }\r\n];\r\n\r\nconst rows = [\r\n    { id: 1, lastName: \"Snow\", firstName: \"Jon\", age: 35 },\r\n    { id: 2, lastName: \"Lannister\", firstName: \"Cersei\", age: 42 },\r\n    { id: 3, lastName: \"Lannister\", firstName: \"Jaime\", age: 45 },\r\n    { id: 4, lastName: \"Stark\", firstName: \"Arya\", age: 16 },\r\n    { id: 5, lastName: \"Targaryen\", firstName: \"Daenerys\", age: null },\r\n    { id: 6, lastName: \"Melisandre\", firstName: null, age: 150 },\r\n    { id: 7, lastName: \"Clifford\", firstName: \"Ferrara\", age: 44 },\r\n    { id: 8, lastName: \"Frances\", firstName: \"Rossini\", age: 36 },\r\n    { id: 9, lastName: \"Roxie\", firstName: \"Harvey\", age: 65 }\r\n];\r\n\r\nfunction Table(hi, hello){\r\n\r\n    useEffect(()=>{\r\n        setTimeout(()=>{\r\n         console.log(hi.content, hello.content);\r\n         console.log(rows, columns);\r\n        },500);\r\n    },[])\r\n    return(\r\n        <div style={{ height: 400, width: \"100%\" }}>\r\n            <DataGrid rows={hi.content} columns={hello.content} pageSize={5} checkboxSelection />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Table;","C:\\Users\\woonkyoung_ham1\\WebstormProjects\\react_ham\\src\\UI\\molecules\\Table\\TableGrid.js",["294","295","296","297","298","299","300","301","302"],"\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst defaultTheme = createMuiTheme();\r\n\r\nexport default function TableGrid(props){\r\n    return(\r\n        <>\r\n\r\n        </>\r\n    );\r\n}",{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","severity":1,"message":"308","line":1,"column":24,"nodeType":"309","messageId":"310","endLine":1,"endColumn":32},{"ruleId":"307","severity":1,"message":"311","line":8,"column":9,"nodeType":"309","messageId":"310","endLine":8,"endColumn":13},{"ruleId":"307","severity":1,"message":"312","line":5,"column":8,"nodeType":"309","messageId":"310","endLine":5,"endColumn":18},{"ruleId":"307","severity":1,"message":"313","line":13,"column":12,"nodeType":"309","messageId":"310","endLine":13,"endColumn":21},{"ruleId":"307","severity":1,"message":"314","line":13,"column":23,"nodeType":"309","messageId":"310","endLine":13,"endColumn":38},{"ruleId":"307","severity":1,"message":"315","line":15,"column":11,"nodeType":"309","messageId":"310","endLine":15,"endColumn":26},{"ruleId":"316","severity":1,"message":"317","line":17,"column":15,"nodeType":"318","endLine":43,"endColumn":6},{"ruleId":"307","severity":1,"message":"319","line":68,"column":16,"nodeType":"309","messageId":"310","endLine":68,"endColumn":25},{"ruleId":"307","severity":1,"message":"313","line":12,"column":12,"nodeType":"309","messageId":"310","endLine":12,"endColumn":21},{"ruleId":"307","severity":1,"message":"314","line":12,"column":23,"nodeType":"309","messageId":"310","endLine":12,"endColumn":38},{"ruleId":"307","severity":1,"message":"320","line":9,"column":7,"nodeType":"309","messageId":"310","endLine":9,"endColumn":19},{"ruleId":"321","severity":1,"message":"322","line":38,"column":121,"nodeType":"323","messageId":"324","endLine":38,"endColumn":123},{"ruleId":"321","severity":1,"message":"322","line":38,"column":155,"nodeType":"323","messageId":"324","endLine":38,"endColumn":157},{"ruleId":"307","severity":1,"message":"325","line":111,"column":9,"nodeType":"309","messageId":"310","endLine":111,"endColumn":11},{"ruleId":"326","severity":1,"message":"327","line":119,"column":1,"nodeType":"328","endLine":4434,"endColumn":2},{"ruleId":"329","severity":1,"message":"330","line":170,"column":53,"nodeType":"318","messageId":"331","endLine":170,"endColumn":55},{"ruleId":"329","severity":1,"message":"330","line":173,"column":53,"nodeType":"318","messageId":"331","endLine":173,"endColumn":55},{"ruleId":"307","severity":1,"message":"332","line":2358,"column":15,"nodeType":"309","messageId":"310","endLine":2358,"endColumn":19},{"ruleId":"307","severity":1,"message":"333","line":2513,"column":9,"nodeType":"309","messageId":"310","endLine":2513,"endColumn":24},{"ruleId":"329","severity":1,"message":"330","line":3154,"column":43,"nodeType":"318","messageId":"331","endLine":3154,"endColumn":45},{"ruleId":"329","severity":1,"message":"330","line":3848,"column":30,"nodeType":"318","messageId":"331","endLine":3848,"endColumn":32},{"ruleId":"329","severity":1,"message":"330","line":3853,"column":33,"nodeType":"318","messageId":"331","endLine":3853,"endColumn":35},{"ruleId":"329","severity":1,"message":"330","line":3860,"column":39,"nodeType":"318","messageId":"331","endLine":3860,"endColumn":41},{"ruleId":"329","severity":1,"message":"330","line":3868,"column":32,"nodeType":"318","messageId":"331","endLine":3868,"endColumn":34},{"ruleId":"329","severity":1,"message":"334","line":3889,"column":58,"nodeType":"318","messageId":"335","endLine":3889,"endColumn":60},{"ruleId":"329","severity":1,"message":"334","line":4241,"column":56,"nodeType":"318","messageId":"335","endLine":4241,"endColumn":58},{"ruleId":"329","severity":1,"message":"334","line":4287,"column":56,"nodeType":"318","messageId":"335","endLine":4287,"endColumn":58},{"ruleId":"307","severity":1,"message":"336","line":4,"column":8,"nodeType":"309","messageId":"310","endLine":4,"endColumn":13},{"ruleId":"316","severity":1,"message":"337","line":116,"column":8,"nodeType":"338","endLine":116,"endColumn":10,"suggestions":"339"},{"ruleId":"316","severity":1,"message":"340","line":120,"column":8,"nodeType":"338","endLine":120,"endColumn":25,"suggestions":"341"},{"ruleId":"307","severity":1,"message":"342","line":8,"column":12,"nodeType":"309","messageId":"310","endLine":8,"endColumn":16},{"ruleId":"316","severity":1,"message":"343","line":18,"column":24,"nodeType":"309","endLine":18,"endColumn":31},{"ruleId":"307","severity":1,"message":"344","line":1,"column":20,"nodeType":"309","messageId":"310","endLine":1,"endColumn":29},{"ruleId":"307","severity":1,"message":"345","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":16},{"ruleId":"307","severity":1,"message":"346","line":8,"column":17,"nodeType":"309","messageId":"310","endLine":8,"endColumn":25},{"ruleId":"307","severity":1,"message":"347","line":1,"column":10,"nodeType":"309","messageId":"310","endLine":1,"endColumn":39},{"ruleId":"316","severity":1,"message":"348","line":33,"column":8,"nodeType":"338","endLine":33,"endColumn":37,"suggestions":"349"},{"ruleId":"316","severity":1,"message":"350","line":37,"column":8,"nodeType":"338","endLine":37,"endColumn":34,"suggestions":"351"},{"ruleId":"316","severity":1,"message":"352","line":44,"column":8,"nodeType":"338","endLine":44,"endColumn":30,"suggestions":"353"},{"ruleId":"307","severity":1,"message":"354","line":7,"column":12,"nodeType":"309","messageId":"310","endLine":7,"endColumn":19},{"ruleId":"307","severity":1,"message":"355","line":7,"column":21,"nodeType":"309","messageId":"310","endLine":7,"endColumn":31},{"ruleId":"307","severity":1,"message":"356","line":14,"column":12,"nodeType":"309","messageId":"310","endLine":14,"endColumn":22},{"ruleId":"307","severity":1,"message":"357","line":14,"column":24,"nodeType":"309","messageId":"310","endLine":14,"endColumn":37},{"ruleId":"307","severity":1,"message":"358","line":15,"column":12,"nodeType":"309","messageId":"310","endLine":15,"endColumn":27},{"ruleId":"307","severity":1,"message":"359","line":19,"column":11,"nodeType":"309","messageId":"310","endLine":19,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":33,"column":33,"nodeType":"318","messageId":"331","endLine":33,"endColumn":35},{"ruleId":"329","severity":1,"message":"330","line":45,"column":49,"nodeType":"318","messageId":"331","endLine":45,"endColumn":51},{"ruleId":"329","severity":1,"message":"330","line":46,"column":54,"nodeType":"318","messageId":"331","endLine":46,"endColumn":56},{"ruleId":"360","severity":1,"message":"361","line":87,"column":25,"nodeType":"362","messageId":"363","endLine":88,"endColumn":35},{"ruleId":"316","severity":1,"message":"364","line":95,"column":8,"nodeType":"338","endLine":95,"endColumn":27,"suggestions":"365"},{"ruleId":"316","severity":1,"message":"340","line":101,"column":8,"nodeType":"338","endLine":101,"endColumn":22,"suggestions":"366"},{"ruleId":"316","severity":1,"message":"340","line":105,"column":8,"nodeType":"338","endLine":105,"endColumn":23,"suggestions":"367"},{"ruleId":"329","severity":1,"message":"334","line":168,"column":59,"nodeType":"318","messageId":"335","endLine":168,"endColumn":61},{"ruleId":"329","severity":1,"message":"330","line":221,"column":61,"nodeType":"318","messageId":"331","endLine":221,"endColumn":63},{"ruleId":"329","severity":1,"message":"330","line":248,"column":61,"nodeType":"318","messageId":"331","endLine":248,"endColumn":63},{"ruleId":"360","severity":1,"message":"368","line":254,"column":33,"nodeType":"362","messageId":"369","endLine":254,"endColumn":51},{"ruleId":"329","severity":1,"message":"334","line":429,"column":57,"nodeType":"318","messageId":"335","endLine":429,"endColumn":59},{"ruleId":"329","severity":1,"message":"330","line":43,"column":37,"nodeType":"318","messageId":"331","endLine":43,"endColumn":39},{"ruleId":"316","severity":1,"message":"370","line":99,"column":8,"nodeType":"338","endLine":99,"endColumn":10,"suggestions":"371"},{"ruleId":"316","severity":1,"message":"372","line":106,"column":8,"nodeType":"338","endLine":110,"endColumn":6,"suggestions":"373"},{"ruleId":"329","severity":1,"message":"330","line":118,"column":40,"nodeType":"318","messageId":"331","endLine":118,"endColumn":42},{"ruleId":"329","severity":1,"message":"330","line":144,"column":53,"nodeType":"318","messageId":"331","endLine":144,"endColumn":55},{"ruleId":"329","severity":1,"message":"330","line":169,"column":40,"nodeType":"318","messageId":"331","endLine":169,"endColumn":42},{"ruleId":"329","severity":1,"message":"330","line":189,"column":45,"nodeType":"318","messageId":"331","endLine":189,"endColumn":47},{"ruleId":"329","severity":1,"message":"330","line":236,"column":49,"nodeType":"318","messageId":"331","endLine":236,"endColumn":51},{"ruleId":"329","severity":1,"message":"330","line":257,"column":58,"nodeType":"318","messageId":"331","endLine":257,"endColumn":60},{"ruleId":"329","severity":1,"message":"330","line":298,"column":30,"nodeType":"318","messageId":"331","endLine":298,"endColumn":32},{"ruleId":"307","severity":1,"message":"374","line":34,"column":12,"nodeType":"309","messageId":"310","endLine":34,"endColumn":24},{"ruleId":"307","severity":1,"message":"375","line":56,"column":12,"nodeType":"309","messageId":"310","endLine":56,"endColumn":17},{"ruleId":"307","severity":1,"message":"376","line":56,"column":19,"nodeType":"309","messageId":"310","endLine":56,"endColumn":27},{"ruleId":"307","severity":1,"message":"377","line":57,"column":12,"nodeType":"309","messageId":"310","endLine":57,"endColumn":25},{"ruleId":"316","severity":1,"message":"378","line":99,"column":8,"nodeType":"338","endLine":99,"endColumn":10,"suggestions":"379"},{"ruleId":"316","severity":1,"message":"380","line":103,"column":8,"nodeType":"338","endLine":103,"endColumn":30,"suggestions":"381"},{"ruleId":"329","severity":1,"message":"330","line":126,"column":49,"nodeType":"318","messageId":"331","endLine":126,"endColumn":51},{"ruleId":"329","severity":1,"message":"330","line":155,"column":49,"nodeType":"318","messageId":"331","endLine":155,"endColumn":51},{"ruleId":"329","severity":1,"message":"330","line":183,"column":45,"nodeType":"318","messageId":"331","endLine":183,"endColumn":47},{"ruleId":"307","severity":1,"message":"382","line":320,"column":11,"nodeType":"309","messageId":"310","endLine":320,"endColumn":19},{"ruleId":"307","severity":1,"message":"383","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":13},{"ruleId":"329","severity":1,"message":"330","line":68,"column":53,"nodeType":"318","messageId":"331","endLine":68,"endColumn":55},{"ruleId":"307","severity":1,"message":"384","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":21},{"ruleId":"303","replacedBy":"385"},{"ruleId":"305","replacedBy":"386"},{"ruleId":"307","severity":1,"message":"387","line":1,"column":27,"nodeType":"309","messageId":"310","endLine":1,"endColumn":34},{"ruleId":"307","severity":1,"message":"388","line":1,"column":36,"nodeType":"309","messageId":"310","endLine":1,"endColumn":44},{"ruleId":"307","severity":1,"message":"389","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":17},{"ruleId":"307","severity":1,"message":"390","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":11},{"ruleId":"316","severity":1,"message":"391","line":47,"column":7,"nodeType":"338","endLine":47,"endColumn":9,"suggestions":"392"},{"ruleId":"307","severity":1,"message":"393","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"394","line":4,"column":8,"nodeType":"309","messageId":"310","endLine":4,"endColumn":30},{"ruleId":"307","severity":1,"message":"395","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":19},{"ruleId":"307","severity":1,"message":"396","line":7,"column":8,"nodeType":"309","messageId":"310","endLine":7,"endColumn":17},{"ruleId":"307","severity":1,"message":"397","line":8,"column":8,"nodeType":"309","messageId":"310","endLine":8,"endColumn":14},{"ruleId":"307","severity":1,"message":"398","line":9,"column":8,"nodeType":"309","messageId":"310","endLine":9,"endColumn":18},{"ruleId":"307","severity":1,"message":"399","line":10,"column":8,"nodeType":"309","messageId":"310","endLine":10,"endColumn":16},{"ruleId":"307","severity":1,"message":"400","line":11,"column":8,"nodeType":"309","messageId":"310","endLine":11,"endColumn":14},{"ruleId":"307","severity":1,"message":"401","line":13,"column":7,"nodeType":"309","messageId":"310","endLine":13,"endColumn":19},"no-native-reassign",["402"],"no-negated-in-lhs",["403"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Test' is defined but never used.","'LoginCheck' is defined but never used.","'formState' is assigned a value but never used.","'updateFormState' is assigned a value but never used.","'isAuthenticated' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'checkUser' is defined but never used.","'refreshToken' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'u8' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'body' is assigned a value but never used.","'searchCondition' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'store' is defined but never used.","React Hook useEffect has a missing dependency: 'menus'. Either include it or remove the dependency array.","ArrayExpression",["404"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["405"],"'icon' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useEffect' is defined but never used.","'firebase' is defined but never used.","'setBooks' is assigned a value but never used.","'LocalConvenienceStoreOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["406"],"React Hook useEffect has missing dependencies: 'onSubmit' and 'props.dynamicSearch'. Either include them or remove the dependency array.",["407"],"React Hook useEffect has missing dependencies: 'dateChangeHandler' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["408"],"'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","'rowPerPage' is assigned a value but never used.","'setRowPerPage' is assigned a value but never used.","'drawElementsCnt' is assigned a value but never used.","'history' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","React Hook useEffect has missing dependencies: 'checkedItems', 'props.checkedList2', and 'props.columnList'. Either include them or remove the dependency array.",["409"],["410"],["411"],"Expected a 'break' statement before 'case'.","case","React Hook useEffect has missing dependencies: 'getCategoryList' and 'pageAuthInfo'. Either include them or remove the dependency array.",["412"],"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["413"],"'duplicateChk' is assigned a value but never used.","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","'textEditorVal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form', 'getClassificationList', 'getCustomerList', and 'match.params'. Either include them or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.",["414"],"React Hook useEffect has a missing dependency: 'dateChangeHandler'. Either include it or remove the dependency array.",["415"],"'sendData' is assigned a value but never used.","'Table' is defined but never used.","'memo' is defined but never used.",["402"],["403"],"'useMemo' is defined but never used.","'useState' is defined but never used.","'TableGrid' is defined but never used.","'Net' is defined but never used.","React Hook useEffect has missing dependencies: 'hello.content' and 'hi.content'. Either include them or remove the dependency array.",["416"],"'PropTypes' is defined but never used.","'KeyboardArrowRightIcon' is defined but never used.","'FormControl' is defined but never used.","'FormGroup' is defined but never used.","'Button' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'defaultTheme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},"Update the dependencies array to be: [menus]",{"range":"443","text":"444"},"Update the dependencies array to be: [leftMenuDisplay, props]",{"range":"445","text":"446"},"Update the dependencies array to be: [props.searchCategoryGroup, state]",{"range":"447","text":"448"},"Update the dependencies array to be: [onSubmit, props.dynamicSearch, state.selectedCategory]",{"range":"449","text":"450"},"Update the dependencies array to be: [startDate, endDate, dateChangeHandler, props]",{"range":"451","text":"452"},"Update the dependencies array to be: [checkedItems, props.checkedList2, props.columnList, props.contentData]",{"range":"453","text":"454"},"Update the dependencies array to be: [checkedItems, props]",{"range":"455","text":"456"},"Update the dependencies array to be: [checkedItems2, props]",{"range":"457","text":"458"},"Update the dependencies array to be: [getCategoryList, pageAuthInfo]",{"range":"459","text":"460"},"Update the dependencies array to be: [loadData, pageState.currentPage, pageState.searchCategory1, pageState.searchCategory2, pageState.searchCategory3]",{"range":"461","text":"462"},"Update the dependencies array to be: [form, getClassificationList, getCustomerList, match.params]",{"range":"463","text":"464"},"Update the dependencies array to be: [startDate, endDate, dateChangeHandler]",{"range":"465","text":"466"},"Update the dependencies array to be: [hello.content, hi.content]",{"range":"467","text":"468"},[3487,3489],"[menus]",[3566,3583],"[leftMenuDisplay, props]",[1030,1059],"[props.searchCategoryGroup, state]",[1149,1175],"[onSubmit, props.dynamicSearch, state.selectedCategory]",[1339,1361],"[startDate, endDate, dateChangeHandler, props]",[3996,4015],"[checkedItems, props.checkedList2, props.columnList, props.contentData]",[4195,4209],"[checkedItems, props]",[4311,4326],"[checkedItems2, props]",[2302,2304],"[getCategoryList, pageAuthInfo]",[2436,2574],"[loadData, pageState.currentPage, pageState.searchCategory1, pageState.searchCategory2, pageState.searchCategory3]",[3221,3223],"[form, getClassificationList, getCustomerList, match.params]",[3293,3315],"[startDate, endDate, dateChangeHandler]",[1724,1726],"[hello.content, hi.content]"]